@inject SelectedEthereumHostProviderService selectedHostProviderService
@inject StateContainer stateContainer

@if (SelectedAccount is null)
{
<NavLink href="@CurrentHref" Match="NavLinkMatch.Prefix"
    ActiveClass="md:text-blue-700 md:p-0 dark:text-white md:dark:text-blue-500"
    class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent">
    Connect Wallet
</NavLink>
}
else {
<NavLink href="@CurrentHref" Match="NavLinkMatch.Prefix"
    ActiveClass="md:text-blue-700 md:p-0 dark:text-white md:dark:text-blue-500"
    class="max-w-40 block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent">
    @ShortAccount(SelectedAccount)
</NavLink>

}

@code {
    string? SelectedAccount { get; set; }

    string? ShortedAccount {get; set;}

    long SelectedChainId { get; set; }

    bool EthereumAvailable { get; set; }

    string CurrentHref {get; set;} = "/app/address/";


    IEthereumHostProvider? _ethereumHostProvider;

    protected override void OnInitialized()
    {
        //metamask is selected
        _ethereumHostProvider = selectedHostProviderService.SelectedHost;
        _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
        _ethereumHostProvider.NetworkChanged += HostProvider_NetworkChanged;
        _ethereumHostProvider.EnabledChanged += HostProviderOnEnabledChanged;
    }

    private async Task HostProviderOnEnabledChanged(bool enabled)
    {
        if (enabled)
        {
            await GetChainId();
            this.StateHasChanged();
        }
    }

    private async Task GetChainId()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var chainId = await web3.Eth.ChainId.SendRequestAsync();
        SelectedChainId = (long)chainId.Value;
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        stateContainer.SelectedAccount = SelectedAccount;
        stateContainer.OnChange += StateHasChanged;
        ShortedAccount = ShortAccount(SelectedAccount);
        CurrentHref = "/app/address/" + SelectedAccount;
        await GetChainId();
        StateHasChanged();
    }

    private async Task HostProvider_NetworkChanged(long chainId)
    {
        await Task.CompletedTask;
        SelectedChainId = chainId;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
        if (EthereumAvailable)
        {
            SelectedAccount = await _ethereumHostProvider.GetProviderSelectedAccountAsync();
            stateContainer.SelectedAccount = SelectedAccount;

            ShortedAccount = ShortAccount(SelectedAccount);
            CurrentHref = "/app/address/" + SelectedAccount;

            await GetChainId();
            StateHasChanged();

        }
    }

    private string ShortAccount(string longAccount)
    {
        return longAccount[0..6] + "..." + longAccount[38..];
    }
}
