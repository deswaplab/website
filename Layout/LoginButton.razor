@using Nethereum.Blazor
@using Nethereum.UI

@implements IDisposable
@inject MetamaskHostProvider _metamaskHostProvider
@inject SelectedEthereumHostProviderService _selectedHostProvider
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ILogger<LoginButton> Logger
@inject IStringLocalizer<SharedResource> Loc

@if (MetamaskAvailable)
{
    <button type="button" 
        class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900"
        @onclick="@EnableEthereumAsync"
    >@Loc["Connect Wallet"]</button>
}else{
    <button type="button" class="text-white bg-blue-400 dark:bg-blue-500 cursor-not-allowed font-medium rounded-lg text-sm px-5 py-2.5 text-center" disabled>@Loc["InstallMetamask_Stmt"]</button>
}

@code {

    bool MetamaskAvailable { get; set; }
    string? SelectedAccount { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
            _metamaskHostProvider.NetworkChanged += MetamaskHostProvider_NetworkChainIdChanged;
            MetamaskAvailable = await _metamaskHostProvider.CheckProviderAvailabilityAsync();
            if (MetamaskAvailable)
            {
                SelectedAccount = await _metamaskHostProvider.GetProviderSelectedAccountAsync();
                var web3 = await _metamaskHostProvider.GetWeb3Async();
                var chainId = await web3.Eth.ChainId.SendRequestAsync();
                Logger.LogInformation("first render: SelectedAccount={}, chainId={}", SelectedAccount, chainId);
                await _metamaskHostProvider.ChangeSelectedNetworkAsync((long)chainId.Value);
                if (!string.IsNullOrEmpty(SelectedAccount))
                {
                    await _selectedHostProvider.SetSelectedEthereumHostProvider(_metamaskHostProvider);
                }
            }
            
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
        _metamaskHostProvider.NetworkChanged -= MetamaskHostProvider_NetworkChainIdChanged;
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        await _selectedHostProvider.SetSelectedEthereumHostProvider(_metamaskHostProvider);

        if (_authenticationStateProvider is EthereumAuthenticationStateProvider)
        {
            ((EthereumAuthenticationStateProvider)_authenticationStateProvider)?.NotifyAuthenticationStateAsEthereumConnected(account);
        }

        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task MetamaskHostProvider_NetworkChainIdChanged(long chainId)
    {
        await InvokeAsync(() => this.StateHasChanged());
    }

    protected async Task EnableEthereumAsync()
    {
        SelectedAccount = await _metamaskHostProvider.EnableProviderAsync();
        await _selectedHostProvider.SetSelectedEthereumHostProvider(_metamaskHostProvider);

        if (_authenticationStateProvider is EthereumAuthenticationStateProvider)
        {
            ((EthereumAuthenticationStateProvider)_authenticationStateProvider)?.NotifyAuthenticationStateAsEthereumConnected(SelectedAccount);
        }

        StateHasChanged();
        
    }
}
