@using Microsoft.AspNetCore.Components.Authorization
@using Nethereum.Blazor
@using Nethereum.UI
@implements IDisposable;
@inject MetamaskHostProvider _metamaskHostProvider;
@inject SelectedEthereumHostProviderService _selectedHostProvider;
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject ILogger<MyMetamask> Logger
@inject StateContainer StateContainer

<div>
    @if (MetamaskAvailable)
    {
        <CascadingAuthenticationState>
            <AuthorizeView Roles="EthereumConnected">
                <Authorized>
                    <NavLink href=@($"/app/users/{SelectedAccount}/tokens/{CurrentNetwork}") Match="NavLinkMatch.Prefix"
                        ActiveClass="md:text-blue-700 md:p-0 dark:text-white md:dark:text-blue-500"
                        class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent">
                        @Truncate(SelectedAccount, SelectedAccountTruncateLength)
                    </NavLink>
                </Authorized>
                <NotAuthorized>
                    <button type="button" 
                        class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900"
                        @onclick="@EnableEthereumAsync"
                    >@ConnectText</button>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
    }else{
        <button type="button" class="text-white bg-blue-400 dark:bg-blue-500 cursor-not-allowed font-medium rounded-lg text-sm px-5 py-2.5 text-center" disabled>@InstallMetamaskText</button>
    }
</div>

@code {

    bool MetamaskAvailable { get; set; }
    string? SelectedAccount { get; set; }

    [Parameter]
    public string ConnectText { get; set; } = "Connect Metamask";

    [Parameter]
    public string InstallMetamaskText { get; set; } = "Please Install Metamask";

    [Parameter]
    public int SelectedAccountTruncateLength { get; set; } = 10;

    private string CurrentNetwork = "";

    public long NetworkChainId {get; set;}

    public async Task GetCurrentNetwork() {
        var web3 = await _metamaskHostProvider.GetWeb3Async();
        var chainId = await web3.Eth.ChainId.SendRequestAsync();
        NetworkChainId = (long)chainId.Value;

        CurrentNetwork = EthNetwork.ChainIdToNetwork(NetworkChainId);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
            _metamaskHostProvider.NetworkChanged += MetamaskHostProvider_NetworkChainIdChanged;
            StateContainer.OnChange += StateHasChanged;
            MetamaskAvailable = await _metamaskHostProvider.CheckProviderAvailabilityAsync();
            if (MetamaskAvailable)
            {
                SelectedAccount = await _metamaskHostProvider.GetProviderSelectedAccountAsync();
                await GetCurrentNetwork();
                await _metamaskHostProvider.ChangeSelectedNetworkAsync(NetworkChainId);

                // 手动设置状态
                StateContainer.SelectedAccount = SelectedAccount;
                StateContainer.SelectedChainId = NetworkChainId;

                if (!string.IsNullOrEmpty(SelectedAccount))
                {
                    await _selectedHostProvider.SetSelectedEthereumHostProvider(_metamaskHostProvider);
                }
            }
            
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
        _metamaskHostProvider.NetworkChanged -= MetamaskHostProvider_NetworkChainIdChanged;
        StateContainer.OnChange -= StateHasChanged;
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        StateContainer.SelectedAccount = account;
        Logger.LogInformation($"Selected Account changed: {account}");
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task MetamaskHostProvider_NetworkChainIdChanged(long chainId)
    {
        NetworkChainId = chainId;
        CurrentNetwork = EthNetwork.ChainIdToNetwork(chainId);
        StateContainer.SelectedChainId = chainId;
        Logger.LogInformation($"Network Chain Id changed: {chainId}");
        await InvokeAsync(() => this.StateHasChanged());
    }

    protected async Task EnableEthereumAsync()
    {
       
        SelectedAccount = await _metamaskHostProvider.EnableProviderAsync();
        await GetCurrentNetwork();
        await _selectedHostProvider.SetSelectedEthereumHostProvider(_metamaskHostProvider);

        if (_authenticationStateProvider is EthereumAuthenticationStateProvider)
        {
            ((EthereumAuthenticationStateProvider)_authenticationStateProvider)?.NotifyStateHasChanged();
        }

        StateHasChanged();
        
    }

    public static string Truncate(string? value, int maxLength, string truncationSuffix = "…")
    {
        return value?.Length > maxLength
            ? value.Substring(0, maxLength) + truncationSuffix
            : "";
    }
   
}
