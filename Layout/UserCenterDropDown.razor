@using Microsoft.AspNetCore.Components.Authorization
@using Nethereum.Blazor
@using Nethereum.UI
@using DeswapApp.Localization

@implements IDisposable
@inject MetamaskHostProvider _metamaskHostProvider
@inject SelectedEthereumHostProviderService _selectedHostProvider
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ILogger<UserCenterDropDown> Logger
@inject IStringLocalizer<SharedResource> Loc

<div>
    @if (MetamaskAvailable)
    {
        <CascadingAuthenticationState>
            <AuthorizeView Roles="EthereumConnected">
                <Authorized>
                    <button id="userCenterDropDown"
                        class="flex items-center justify-between w-full py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:w-auto md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:focus:text-white dark:border-gray-700 dark:hover:bg-gray-700 md:dark:hover:bg-transparent"
                        @onclick="ToggleUserDropDown"
                        @onclick:stopPropagation="true"
                    >
                        <div class="inline-flex items-center">
                            @Truncate(SelectedAccount, SelectedAccountTruncateLength)
                            <svg class="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
                            </svg>
                        </div>
                    </button>
                    <div class="@UserDropDownClass z-10 absolute font-normal bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700 dark:divide-gray-600">
                        <ul class="py-2 text-sm text-gray-700 dark:text-gray-400" aria-labelledby="dropdownLargeButton"
                            @onclick="ToggleUserDropDown"
                        >
                            <li>
                                <a class="flex flex-row items-center justify-between block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white" role="menuitem"
                                    href="/app/user/options"
                                >
                                    @Loc["My Options NFT"]
                                </a>
                            </li>
                            <li>
                                <a class="flex flex-row items-center justify-between block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white" role="menuitem"
                                    href="/app/user/lottery"
                                >
                                    @Loc["My Lottery NFT"]
                                </a>
                            </li>
                            <li>
                                <a class="flex flex-row items-center justify-between block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white" role="menuitem"
                                    href="/app/user/redenvelope"
                                >
                                    @Loc["My RedEnvelope NFT"]
                                </a>
                            </li>
                            <li>
                                <a class="flex flex-row items-center justify-between block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white" role="menuitem"
                                    href="/app/user/roulette"
                                >
                                    @Loc["My Roulette NFT"]
                                </a>
                            </li>
                        </ul>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <button type="button" 
                        class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900"
                        @onclick="@EnableEthereumAsync"
                    >@Loc["Connect Wallet"]</button>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
    }else{
        <button type="button" class="text-white bg-blue-400 dark:bg-blue-500 cursor-not-allowed font-medium rounded-lg text-sm px-5 py-2.5 text-center" disabled>@Loc["InstallMetamask_Stmt"]</button>
    }
</div>

@code {

    bool MetamaskAvailable { get; set; }
    string? SelectedAccount { get; set; }

    [Parameter]
    public int SelectedAccountTruncateLength { get; set; } = 10;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
            _metamaskHostProvider.NetworkChanged += MetamaskHostProvider_NetworkChainIdChanged;
            MetamaskAvailable = await _metamaskHostProvider.CheckProviderAvailabilityAsync();
            if (MetamaskAvailable)
            {
                SelectedAccount = await _metamaskHostProvider.GetProviderSelectedAccountAsync();
                var web3 = await _metamaskHostProvider.GetWeb3Async();
                var chainId = await web3.Eth.ChainId.SendRequestAsync();
                await _metamaskHostProvider.ChangeSelectedNetworkAsync((long)chainId.Value);
                if (!string.IsNullOrEmpty(SelectedAccount))
                {
                    await _selectedHostProvider.SetSelectedEthereumHostProvider(_metamaskHostProvider);
                }
            }
            
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
        _metamaskHostProvider.NetworkChanged -= MetamaskHostProvider_NetworkChainIdChanged;
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        Logger.LogInformation($"Selected Account changed: {account}");
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task MetamaskHostProvider_NetworkChainIdChanged(long chainId)
    {
        Logger.LogInformation($"Network Chain Id changed: {chainId}");
        await InvokeAsync(() => this.StateHasChanged());
    }

    protected async Task EnableEthereumAsync()
    {
       
        SelectedAccount = await _metamaskHostProvider.EnableProviderAsync();
        await _selectedHostProvider.SetSelectedEthereumHostProvider(_metamaskHostProvider);

        if (_authenticationStateProvider is EthereumAuthenticationStateProvider)
        {
            ((EthereumAuthenticationStateProvider)_authenticationStateProvider)?.NotifyStateHasChanged();
        }

        StateHasChanged();
        
    }

    public static string Truncate(string? value, int maxLength, string truncationSuffix = "â€¦")
    {
        return value?.Length > maxLength
            ? value.Substring(0, maxLength) + truncationSuffix
            : "";
    }
   
    private bool CollapseUserDropDown = false;

    private string UserDropDownClass => CollapseUserDropDown ? "" : "hidden";
    private void ToggleUserDropDown()
    {
        CollapseUserDropDown = !CollapseUserDropDown;
    }
}
