@inject IJSRuntime JS
@inject ILogger<ThemeSwitch> Logger
@inject IStringLocalizer<SharedResource> Loc

<button id="theme-toggle" @onmouseenter="ShowToolTip" @onmouseleave="HideToolTip" @onclick="ToggleTheme" type="button" 
    data-popover-target="popover-default" data-popover-placement="top" 
    class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5">
    <svg id="theme-toggle-dark-icon" class="@darkClass w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>
    <svg id="theme-toggle-light-icon" class="@lightClass w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
</button>
<div data-popover id="popover-default" role="tooltip" class="absolute z-10 @toolTipVisibleClass @opacityLevel inline-block w-32 text-sm text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800">
    <div class="px-3 py-2">
        <p>@toolTipText</p>
    </div>
</div>

@code {
    private bool isDark = true;

    private string lightClass => isDark ? "" : "hidden";

    private string darkClass => isDark ? "hidden" : "";

    private bool toolTipVisible = false;

    private string toolTipVisibleClass => toolTipVisible ? "visible" : "invisible";

    private string opacityLevel => toolTipVisible ? "opacity-100" : "opacity-0";

    private string toolTipText => isDark ? Loc["Toggle light mode"] : Loc["Toggle dark mode"];

    private async Task ToggleTheme()
    {
        if (isDark)
        {
            // 切换到light mode
            await JS.InvokeVoidAsync("localStorage.setItem", "color-theme", "light");
            await JS.InvokeVoidAsync("document.documentElement.classList.remove", "dark");
            isDark = false;
        }
        else
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "color-theme", "dark");
            await JS.InvokeVoidAsync("document.documentElement.classList.add", "dark");
            isDark = true;
        }
    }

    private void ShowToolTip()
    {
        toolTipVisible = true;
    }

    private void HideToolTip()
    {
        toolTipVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        var theme = await JS.InvokeAsync<string>("localStorage.getItem", "color-theme");
        Logger.LogInformation($"init theme switch, localStorage theme: {theme}");
        if (theme == "light")
        {
            isDark = false;
        }
        else if (theme == "dark")
        {
            isDark = true;
        }
        else
        {
            // local storage 没有，则从当前页面寻找默认设置
            var containsDark = await JS.InvokeAsync<bool>("document.documentElement.classList.contains", "dark");
            if (containsDark)
            {
                isDark = true;
            }
            else
            {
                isDark = false;
            }
        }
    }
}
