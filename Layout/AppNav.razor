@inject IMetamaskInterop _metamaskInterop;
@inject MetamaskHostProvider _metamaskHostProvider;
@inject ILogger<AppNav> Logger;

@using System.Text.Json.Serialization
@using Nethereum.Web3

<nav class="bg-white border-gray-200 dark:bg-gray-900">
    <div class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">
        <a href="/" class="flex items-center space-x-3 rtl:space-x-reverse">
            <img src="/img/logo-no-text.svg" class="h-8" alt="Deswap Logo" width="36px" height="32px" />
            <span class="self-center text-2xl font-semibold whitespace-nowrap dark:text-white">Deswap</span>
        </a>
        <button data-collapse-toggle="navbar-default" type="button"
            class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
            aria-controls="navbar-default" aria-expanded="false"
            @onclick="ToggleMenuAsync"
        >
            <span class="sr-only">Open main menu</span>
            <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 14">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M1 1h15M1 7h15M1 13h15" />
            </svg>
        </button>
        <div class="@hiddenClass w-full md:block md:w-auto" id="navbar-default" @onclick="ToggleMenuAsync">
            <ul
                class="font-medium flex flex-col relative items-center justify-evenly p-4 md:p-0 mt-4 border border-gray-100 rounded-lg bg-gray-50 md:flex-row md:space-x-8 rtl:space-x-reverse md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
                <li>
                    <NavLink href="/app" Match="NavLinkMatch.All"
                        ActiveClass="md:text-blue-700 md:p-0 dark:text-white md:dark:text-blue-500"
                        class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent">
                        Mint
                    </NavLink>
                </li>
                <li>
                    <NavLink href="/app/collections" Match="NavLinkMatch.Prefix"
                        ActiveClass="md:text-blue-700 md:p-0 dark:text-white md:dark:text-blue-500"
                        class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent">
                        Collections
                    </NavLink>
                </li>
                <CascadingAuthenticationState>
                    <AuthorizeView Roles="EthereumConnected">
                        <Authorized>
                            <li>
                                <button id="dropdownNavbarLink" data-dropdown-toggle="dropdownNavbar" 
                                    class="flex items-center justify-between w-full py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:w-auto md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:focus:text-white dark:border-gray-700 dark:hover:bg-gray-700 md:dark:hover:bg-transparent"
                                    @onclick="ToggleNetworkList"
                                    @onclick:stopPropagation="true"
                                >
                                    <div class="inline-flex items-center">
                                        @if (currentConnectedNetwork is not null)
                                        {
                                        <img src=@($"img/{currentConnectedNetwork.Logo}") class="h-3.5 w-3.5 rounded-full me-2" />
                                        <span>@currentConnectedNetwork.Name</span>
                                        }
                                        else
                                        {
                                            <span class="text-red-800 bg-red-50 dark:bg-gray-800 dark:text-red-400">Unsupported Network</span>
                                        }
                                        <svg class="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
                                        </svg>
                                    </div> 
                                </button>
                                <!-- Dropdown menu -->
                                <div id="dropdownNavbar" class="@NetworkListClass z-10 absolute font-normal bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700 dark:divide-gray-600">
                                    <ul class="py-2 text-sm text-gray-700 dark:text-gray-400" aria-labelledby="dropdownLargeButton">
                                        @foreach (var network in SupportedNetworks.Inner)
                                        {
                                        <li>
                                            <a class="flex flex-row items-center justify-between block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white" role="menuitem"
                                                @onclick="async () => await ToggleNetwork(network.ChainId)"
                                            >
                                                <div class="inline-flex items-center">
                                                    <img src=@($"img/{network.Logo}") class="h-3.5 w-3.5 rounded-full me-2" />
                                                    <span>@network.Name</span>
                                                </div>
                                                @if (_metamaskHostProvider.SelectedNetworkChainId == network.ChainId)
                                                {
                                                <svg class="w-2.5 h-2.5 text-blue-100 dark:text-blue-300" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 12">
                                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5.917 5.724 10.5 15 1.5"/>
                                                </svg>
                                                }
                                            </a>
                                        </li>
                                        }
                                    </ul>
                                </div>
                            </li>
                        </Authorized>
                    </AuthorizeView>
                </CascadingAuthenticationState>
                <li>
                    <MyMetamask />
                </li>
                <li>
                    <ThemeSwitch />
                </li>
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool collapse = false;

    private string hiddenClass => collapse ? "" : "hidden";

    private void ToggleMenuAsync()
    {
        collapse = !collapse;
    }

    protected override void OnInitialized()
    {
        _metamaskHostProvider.NetworkChanged += MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        // 通知到这个组件更新状态
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task MetamaskHostProvider_NetworkChainIdChanged(long chainId)
    {
        await InvokeAsync(() => this.StateHasChanged());
    }

    public void Dispose()
    {
        _metamaskHostProvider.NetworkChanged -= MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
    }

    private bool CollapseNetworkList = false;

    private string NetworkListClass => CollapseNetworkList ? "" : "hidden";
    private void ToggleNetworkList()
    {
        Logger.LogInformation("toggle networklist");
        CollapseNetworkList = !CollapseNetworkList;
    }

    private Network? currentConnectedNetwork => SupportedNetworks.GetNetwork(_metamaskHostProvider.SelectedNetworkChainId);

    private async Task ToggleNetwork(long chainId)
    {
        Logger.LogInformation("start trigger metamask to change network");
        var p = new Dictionary<string, string>();
        p.Add("chainId", "0x"+Convert.ToString(chainId, 16));
        await _metamaskInterop.SendAsync(new Nethereum.JsonRpc.Client.RpcMessages.RpcRequestMessage(null, "wallet_switchEthereumChain", p));
        CollapseNetworkList = false; // 收起网络菜单
        Logger.LogInformation("change network succeed");
    }
}
