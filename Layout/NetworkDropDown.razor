@using Nethereum.JsonRpc.Client.RpcMessages
@using System.Text.Json
@using System.Text.Json.Serialization

@inject IMetamaskInterop _metamaskInterop
@inject MetamaskHostProvider _metamaskHostProvider
@inject ILogger<NetworkDropDown> Logger
@inject IStringLocalizer<SharedResource> Loc

<CascadingAuthenticationState>
    <AuthorizeView Roles="EthereumConnected">
        <Authorized>
            <button id="dropdownNavbarLink" data-dropdown-toggle="dropdownNavbar" 
                class="flex items-center justify-between w-full py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:w-auto md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:focus:text-white dark:border-gray-700 dark:hover:bg-gray-700 md:dark:hover:bg-transparent"
                @onclick:stopPropagation="true"
                @onmouseover="ShowNetworkList" 
                @onmouseout="HideNetworkList"
            >
                <div class="inline-flex items-center">
                    @if (currentConnectedNetwork is not null)
                    {
                    <img src=@($"img/{currentConnectedNetwork.Logo}") class="h-3.5 w-3.5 rounded-full me-2" />
                    <span>@currentConnectedNetwork.Name</span>
                    }
                    else
                    {
                        <span class="text-red-800 bg-red-50 dark:bg-gray-800 dark:text-red-400">Wrong Network</span>
                    }
                    <svg class="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
                    </svg>
                </div> 
            </button>
            <!-- Dropdown menu -->
            <div id="dropdownNavbar" class="@NetworkListClass z-10 absolute font-normal bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700 dark:divide-gray-600 @NetworkListClass" @onmouseover="ShowNetworkList" @onmouseout="HideNetworkList">
                <ul class="py-2 text-sm text-gray-700 dark:text-gray-400" aria-labelledby="dropdownLargeButton">
                    @foreach (var network in NetworkConfig.Inner)
                    {
                    <li>
                        <a class="flex flex-row items-center justify-between block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white cursor-pointer" role="menuitem"
                            @onclick="async () => await ToggleNetwork(network.ChainId)"
                        >
                            <div class="inline-flex items-center">
                                <img src=@($"img/{network.Logo}") class="h-3.5 w-3.5 rounded-full me-2" />
                                <span>@network.Name</span>
                            </div>
                            @if (_metamaskHostProvider.SelectedNetworkChainId == network.ChainId)
                            {
                            <svg class="w-2.5 h-2.5 text-blue-100 dark:text-blue-300" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 12">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5.917 5.724 10.5 15 1.5"/>
                            </svg>
                            }
                        </a>
                    </li>
                    }
                </ul>
            </div>
        </Authorized>
        <NotAuthorized>
            <LoginButton />
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    protected override void OnInitialized()
    {
        _metamaskHostProvider.NetworkChanged += MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task MetamaskHostProvider_NetworkChainIdChanged(long chainId)
    {
        await InvokeAsync(() => this.StateHasChanged());
    }

    public void Dispose()
    {
        _metamaskHostProvider.NetworkChanged -= MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
    }

    private NetworkCore? currentConnectedNetwork => NetworkConfig.GetNetwork(_metamaskHostProvider.SelectedNetworkChainId);

    private bool CollapseNetworkList = true;

    private void ShowNetworkList()
    {
        CollapseNetworkList = false; 
    }

    private void HideNetworkList()
    {
        CollapseNetworkList = true; 
    }

    private string NetworkListClass => CollapseNetworkList ? "hidden" : "block";

    private async Task ToggleNetwork(long chainId)
    {
        CollapseNetworkList = false; // close dropdown
        if (chainId != _metamaskHostProvider.SelectedNetworkChainId)
        {
            var p = new Dictionary<string, string>();
            p.Add("chainId", "0x"+Convert.ToString(chainId, 16));
            var res = await _metamaskInterop.SendAsync(new RpcRequestMessage(null, "wallet_switchEthereumChain", p));
            // add new network, https://docs.metamask.io/wallet/how-to/manage-networks/add-network/
            if (res.Error.Code == 4902)
            {
                var p2 = new Dictionary<string, object>();
                var network = NetworkConfig.GetNetwork(chainId);
                p2.Add("chainId", "0x"+Convert.ToString(chainId, 16));
                p2.Add("chainName", network!.Name);
                p2.Add("rpcUrls", new List<string> {network!.RpcUrl});
                p2.Add("blockExplorerUrls", new List<string> {network!.EtherscanHost});
                // TODO: optimize config more carefully
                p2.Add("nativeCurrency", new Dictionary<string, object> {
                    {"name", "ETH"},
                    {"symbol", "ETH"},
                    {"decimals", 18}
                });
                object[] p3 = [p2];
                await _metamaskInterop.SendAsync(new RpcRequestMessage(null, "wallet_addEthereumChain", p3));
            }
        }
    }
}
