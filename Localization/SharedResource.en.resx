<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Governor" xml:space="preserve">
    <value>Governor</value>
  </data>
  <data name="FAQ" xml:space="preserve">
    <value>FAQ</value>
  </data>
  <data name="App" xml:space="preserve">
    <value>APP</value>
  </data>
  <data name="Mint" xml:space="preserve">
    <value>Mint</value>
  </data>
  <data name="Collections" xml:space="preserve">
    <value>Collections</value>
  </data>
  <data name="Toggle light mode" xml:space="preserve">
    <value>Toggle light mode</value>
  </data>
  <data name="Toggle dark mode" xml:space="preserve">
    <value>Toggle dark mode</value>
  </data>
  <data name="Select Token Pair" xml:space="preserve">
    <value>Select Token Pair</value>
  </data>
  <data name="Select Options Kind" xml:space="preserve">
    <value>Select Options Kind</value>
  </data>
  <data name="Call" xml:space="preserve">
    <value>Call</value>
  </data>
  <data name="Put" xml:space="preserve">
    <value>Put</value>
  </data>
  <data name="You Pay" xml:space="preserve">
    <value>You Pay</value>
  </data>
  <data name="You Will Get" xml:space="preserve">
    <value>You Will Get</value>
  </data>
  <data name="Select Maturity Date" xml:space="preserve">
    <value>Select Maturity Date</value>
  </data>
  <data name="Check Allowance" xml:space="preserve">
    <value>Check Allowance</value>
  </data>
  <data name="Approve" xml:space="preserve">
    <value>Approve</value>
  </data>
  <data name="InvalidNetwork_Stmt" xml:space="preserve">
    <value>Unsupported network, please change in metamask</value>
  </data>
  <data name="InsufficientBalance_Stmt" xml:space="preserve">
    <value>balance not enough, please trasfer some</value>
  </data>
  <data name="InvalidForm_Stmt" xml:space="preserve">
    <value>invalid form, please check your input</value>
  </data>
  <data name="InsufficientAllowance_Stmt" xml:space="preserve">
    <value>allowance not enough, please try approve</value>
  </data>
  <data name="ApproveSuccess_Stmt" xml:space="preserve">
    <value>approved success, goto mint now</value>
  </data>
  <data name="TxCancelled_Stmt" xml:space="preserve">
    <value>you cancelled this transaction</value>
  </data>
  <data name="OptionsMinted_Stmt" xml:space="preserve">
    <value>Options minted, goto trade now</value>
  </data>
  <data name="MaturityTooEarly_Stmt" xml:space="preserve">
    <value>Maturity Date must at least be</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Contract Address" xml:space="preserve">
    <value>Contract Address</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="Network" xml:space="preserve">
    <value>Network</value>
  </data>
  <data name="Barter" xml:space="preserve">
    <value>Barter</value>
  </data>
  <data name="List_Stmt" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="Open_Stmt" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Exercise_Stmt" xml:space="preserve">
    <value>Exercise</value>
  </data>
  <data name="Draw_Stmt" xml:space="preserve">
    <value>Draw</value>
  </data>
  <data name="Burn_Stmt" xml:space="preserve">
    <value>Burn</value>
  </data>
  <data name="InsufficientBalanceToExercise_Stmt" xml:space="preserve">
    <value>insufficient balance to exercise</value>
  </data>
  <data name="InsufficientBalanceAfterApproveToExercise_Stmt" xml:space="preserve">
    <value>after approve still insufficient balance to exercise</value>
  </data>
  <data name="My Options NFT" xml:space="preserve">
    <value>My Options NFT</value>
  </data>
  <data name="My Lottery NFT" xml:space="preserve">
    <value>My Lottery NFT</value>
  </data>
  <data name="My RedEnvelope NFT" xml:space="preserve">
    <value>My RedEnvelope NFT</value>
  </data>
  <data name="My Roulette NFT" xml:space="preserve">
    <value>My Roulette NFT</value>
  </data>
  <data name="My BlackJack NFT" xml:space="preserve">
    <value>My BlackJack NFT</value>
  </data>
  <data name="ExerciseSuccess_Stmt" xml:space="preserve">
    <value>exercised successfully</value>
  </data>
  <data name="BurnSuccess_Stmt" xml:space="preserve">
    <value>burned successfully</value>
  </data>
  <data name="MintSuccess_Stmt" xml:space="preserve">
    <value>mint successfully</value>
  </data>
  <data name="Slogan" xml:space="preserve">
    <value>Wrap your cryptos</value>
  </data>
  <data name="SloganDetail" xml:space="preserve">
    <value>We provide a lot of tools to wrap your cryptos, with our help, your assets will get more liquidity.</value>
  </data>
  <data name="Connect Wallet" xml:space="preserve">
    <value>Connect Wallet</value>
  </data>
  <data name="InstallMetamask_Stmt" xml:space="preserve">
    <value>Please install Metamask</value>
  </data>
  <data name="Balance" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="BalanceIsEmpty_Stmt" xml:space="preserve">
    <value>Balance not enough? Get some from uniswap or binance</value>
  </data>
  <data name="RecommendPrice_Stmt" xml:space="preserve">
    <value>Recommend a price for me</value>
  </data>
  <data name="MintAmount" xml:space="preserve">
    <value>Shares to mint</value>
  </data>
  <data name="Lottery" xml:space="preserve">
    <value>Lottery</value>
  </data>
  <data name="RedEnvelope" xml:space="preserve">
    <value>RedEnvelope</value>
  </data>
  <data name="RedEnvelope Kind" xml:space="preserve">
    <value>RedEnvelope Kind</value>
  </data>
  <data name="Bet_Stmt" xml:space="preserve">
    <value>Bet</value>
  </data>
  <data name="Roulette" xml:space="preserve">
    <value>Roulette</value>
  </data>
  <data name="TxSuccess_Stmt" xml:space="preserve">
    <value>Tx Success</value>
  </data>
  <data name="Lottery_Intro" xml:space="preserve">
    <value>First choose the asset you want to deposit, choose a draw date, then click the mint button you will get your Lottery NFT, you can trade it on any NFT marketplaces.</value>
  </data>
  <data name="Barter_Intro" xml:space="preserve">
    <value>First choose the asset you want to deposit, then choose the target asset you want to receive, then click the mint button you will get your Barter NFT, you can trade it on any NFT marketplaces.</value>
  </data>
  <data name="RedEnvelope_Intro" xml:space="preserve">
    <value>Choose some amount of asset you want to deposit, then click the mint button, list it on NFT marketplaces, only the owner of the NFT can open it.</value>
  </data>
  <data name="Roulette_Intro" xml:space="preserve">
    <value>To mint your roulette table, you have to do the initial bet, after that other people can follow you place more bets. 
    Every round of game, each can only bet once. When a new round is begin, you can place bet again.</value>
  </data>
  <data name="Cta1_Header" xml:space="preserve">
    <value>Mint your Barter NFT</value>
  </data>
  <data name="Cta1_Intro" xml:space="preserve">
    <value>Barter means trading one thing using another thing without using money. 
    In web3 world, we use uniswap to trade ERC20 token using another ERC20 token, we use NFT marketplace like opensea to trade NFT using a FT like ETH or WETH. 
    The Barter NFT is a place to trade NFT by another NFT. In NFT world, one big problem is lack of liquidity, famous NFT projects are too expensive, unfamous NFT projects are too cheap that no one want to buy.
    The Barter NFT is to solve this problem, you don't need to pay you ETH to buy a NFT, you just need to trade your NFT to get another NFT.
    </value>
  </data>
  <data name="Cta2_Header" xml:space="preserve">
    <value>Mint your Lottery NFT</value>
  </data>
  <data name="Cta2_Intro" xml:space="preserve">
    <value>
    If you deposit a certain amount of assets, you can get a lottery NFT. 
    After the buyer buys the redemption rights in the NFT market, the lottery can be drawn after the lottery day. 
    In the end, one lucky person will get the assets you deposited. The deposited assets can be ERC20/ERC721/ERC1155 tokens,
    the lottery NFT is a ERC1155 token, the more shares you own, the more chance you win.
    </value>
  </data>
  <data name="Cta3_Header" xml:space="preserve">
    <value>Mint your red envelope NFT</value>
  </data>
  <data name="Cta3_Intro" xml:space="preserve">
    <value>
    red envelope is a Chinese tradition, people put some money in a red envelope and give it to others as a gift, the receiver can only open it once, and the money inside is a surprise.
    Here you deposit some ERC20/ERC1155 tokens will mint a ERC1155 red envelope NFT, it is designed that every address can only buy once and open once, 
    if you choose to buy more than 1, you would see errors. Currently there are many meme coins in the web3 world, if one day those coins loose value, 
    you can use them to mint red envelope NFTs and send them to your friends for free.
    </value>
  </data>
  <data name="Cta4_Header" xml:space="preserve">
    <value>Play the Roulette NFT game</value>
  </data>
  <data name="Cta4_Intro" xml:space="preserve">
    <value>
    The roulette NFT is a game, everyone can place bet into a roulette, the owner of the roulette NFT can draw the prize and tax some fees, the prize is the sum of all the bets.
    The placed bets can be ERC20/ERC721/ERC1155 tokens. the roulette is fairy game, the owner can't cheat, the owner can't know the result before the draw.
    </value>
  </data>
  <data name="Feature1_Header" xml:space="preserve">
    <value>Democratization</value>
  </data>
  <data name="Feature1_Intro" xml:space="preserve">
    <value>In Web2 world, it's almost impossible for a normal person the run a options exchange or a lottery company, but in Web3 world, with the help of Deswap, you can do these with little cost. If you are good enough, you can get rich. I believe democracy will eventually defeat autocracy.</value>
  </data>
  <data name="Feature2_Header" xml:space="preserve">
    <value>Privacy</value>
  </data>
  <data name="Feature2_Intro" xml:space="preserve">
    <value>We don't track your privacy, we don't need your account, your email, your phone number... As long as you have a web3 wallet installed, you can get started.</value>
  </data>
  <data name="Feature3_Header" xml:space="preserve">
    <value>DAO</value>
  </data>
  <data name="Feature3_Intro" xml:space="preserve">
    <value>We are a DAO, no one owns the platform, and no one can destroy it. With more people using it, our community will become better.</value>
  </data>
  <data name="Features" xml:space="preserve">
    <value>Features</value>
  </data>
  <data name="Governor_Intro" xml:space="preserve">
    <value>Currently Deswap is my personal side project, I designed the website, wrote the code,
I'm planning to build a DAO to governor the platform in the future. Anyone want to corporate
can contact me</value>
  </data>
  <data name="BlackJack" xml:space="preserve">
    <value>BlackJack</value>
  </data>
  <data name="BlackJack_Intro" xml:space="preserve">
    <value>mint a BlackJack NFT means you own this desk, you are the dealer, you can then sell those NFTs and invite BlackJack NFT holders to come to play with you.</value>
  </data>
  <data name="MintSucceedGoTrade_Stmt" xml:space="preserve">
    <value>mint succeed, go to trade.</value>
  </data>
  <data name="Docs" xml:space="preserve">
    <value>Docs</value>
  </data>
  <data name="My Tokens" xml:space="preserve">
    <value>My Tokens</value>
  </data>
  <data name="Select Asset Kind" xml:space="preserve">
    <value>Select Asset Kind</value>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Sicbo" xml:space="preserve">
    <value>Sicbo</value>
  </data>
  <data name="Sicbo_Intro" xml:space="preserve">
    <value>Sicbo is a traditional Chinese dice game</value>
  </data>
  <data name="Deposit_Stmt" xml:space="preserve">
    <value>Deposit</value>
  </data>
  <data name="Win_Stmt" xml:space="preserve">
    <value>You Win!</value>
  </data>
  <data name="Lose_Stmt" xml:space="preserve">
    <value>You Lose!</value>
  </data>
  <data name="DiceNumber_Stmt" xml:space="preserve">
    <value>Dice number is</value>
  </data>
</root>
