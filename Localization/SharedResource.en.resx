<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Governor" xml:space="preserve">
    <value>Governor</value>
  </data>
  <data name="FAQ" xml:space="preserve">
    <value>FAQ</value>
  </data>
  <data name="App" xml:space="preserve">
    <value>APP</value>
  </data>
  <data name="Mint" xml:space="preserve">
    <value>Mint</value>
  </data>
  <data name="Collections" xml:space="preserve">
    <value>Collections</value>
  </data>
  <data name="Toggle light mode" xml:space="preserve">
    <value>Toggle light mode</value>
  </data>
  <data name="Toggle dark mode" xml:space="preserve">
    <value>Toggle dark mode</value>
  </data>
  <data name="Select Token Pair" xml:space="preserve">
    <value>Select Token Pair</value>
  </data>
  <data name="Select Options Kind" xml:space="preserve">
    <value>Select Options Kind</value>
  </data>
  <data name="Call" xml:space="preserve">
    <value>Call</value>
  </data>
  <data name="Put" xml:space="preserve">
    <value>Put</value>
  </data>
  <data name="You Pay" xml:space="preserve">
    <value>You Pay</value>
  </data>
  <data name="You Will Get" xml:space="preserve">
    <value>You Will Get</value>
  </data>
  <data name="Select Maturity Date" xml:space="preserve">
    <value>Select Maturity Date</value>
  </data>
  <data name="Check Allowance" xml:space="preserve">
    <value>Check Allowance</value>
  </data>
  <data name="Approve" xml:space="preserve">
    <value>Approve</value>
  </data>
  <data name="InvalidNetwork_Stmt" xml:space="preserve">
    <value>Unsupported network, please change in metamask</value>
  </data>
  <data name="InsufficientBalance_Stmt" xml:space="preserve">
    <value>balance not enough, please trasfer some</value>
  </data>
  <data name="InvalidForm_Stmt" xml:space="preserve">
    <value>invalid form, please check your input</value>
  </data>
  <data name="InsufficientAllowance_Stmt" xml:space="preserve">
    <value>allowance not enough, please try approve</value>
  </data>
  <data name="ApproveSuccess_Stmt" xml:space="preserve">
    <value>approved success, goto mint now</value>
  </data>
  <data name="TxCancelled_Stmt" xml:space="preserve">
    <value>you cancelled this transaction</value>
  </data>
  <data name="OptionsMinted_Stmt" xml:space="preserve">
    <value>Options minted, goto trade now</value>
  </data>
  <data name="MaturityTooEarly_Stmt" xml:space="preserve">
    <value>Maturity Date must at least be</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Contract Address" xml:space="preserve">
    <value>Contract Address</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="Network" xml:space="preserve">
    <value>Network</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="List_Stmt" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="Open_Stmt" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Exercise_Stmt" xml:space="preserve">
    <value>Exercise</value>
  </data>
  <data name="Draw_Stmt" xml:space="preserve">
    <value>Draw</value>
  </data>
  <data name="Burn_Stmt" xml:space="preserve">
    <value>Burn</value>
  </data>
  <data name="InsufficientBalanceToExercise_Stmt" xml:space="preserve">
    <value>insufficient balance to exercise</value>
  </data>
  <data name="InsufficientBalanceAfterApproveToExercise_Stmt" xml:space="preserve">
    <value>after approve still insufficient balance to exercise</value>
  </data>
  <data name="My Options NFT" xml:space="preserve">
    <value>My Options NFT</value>
  </data>
  <data name="My Lottery NFT" xml:space="preserve">
    <value>My Lottery NFT</value>
  </data>
  <data name="My RedEnvelope NFT" xml:space="preserve">
    <value>My RedEnvelope NFT</value>
  </data>
  <data name="My Roulette NFT" xml:space="preserve">
    <value>My Roulette NFT</value>
  </data>
  <data name="My BlackJack NFT" xml:space="preserve">
    <value>My BlackJack NFT</value>
  </data>
  <data name="ExerciseSuccess_Stmt" xml:space="preserve">
    <value>exercised successfully</value>
  </data>
  <data name="BurnSuccess_Stmt" xml:space="preserve">
    <value>burned successfully</value>
  </data>
  <data name="MintSuccess_Stmt" xml:space="preserve">
    <value>mint successfully</value>
  </data>
  <data name="Slogan" xml:space="preserve">
    <value>Deswap wraps Web2 assets into Web3 using NFT</value>
  </data>
  <data name="SloganDetail" xml:space="preserve">
    <value>We wrap Web2 assets like options, lottery, red envelope into NFTs, you trade these assets the NFT way, because the value of the underlying assets, your NFT get valuable.</value>
  </data>
  <data name="Connect Wallet" xml:space="preserve">
    <value>Connect Wallet</value>
  </data>
  <data name="InstallMetamask_Stmt" xml:space="preserve">
    <value>Please install Metamask</value>
  </data>
  <data name="Balance" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="BalanceIsEmpty_Stmt" xml:space="preserve">
    <value>Balance not enough? Get some from uniswap or binance</value>
  </data>
  <data name="RecommendPrice_Stmt" xml:space="preserve">
    <value>Recommend a price for me</value>
  </data>
  <data name="MintAmount" xml:space="preserve">
    <value>Shares to mint</value>
  </data>
  <data name="Lottery" xml:space="preserve">
    <value>Lottery</value>
  </data>
  <data name="RedEnvelope" xml:space="preserve">
    <value>RedEnvelope</value>
  </data>
  <data name="RedEnvelope Kind" xml:space="preserve">
    <value>RedEnvelope Kind</value>
  </data>
  <data name="Bet_Stmt" xml:space="preserve">
    <value>Bet</value>
  </data>
  <data name="Roulette" xml:space="preserve">
    <value>Roulette</value>
  </data>
  <data name="TxSuccess_Stmt" xml:space="preserve">
    <value>Tx Success</value>
  </data>
  <data name="Lottery_Intro" xml:space="preserve">
    <value>If you deposit a certain amount of assets, you can get a lottery NFT. After the buyer buys the redemption rights in the NFT market, the lottery can be drawn after the lottery day. In the end, one lucky person will get the assets you deposited.</value>
  </data>
  <data name="Options_Intro" xml:space="preserve">
    <value>You are about to mint an option NFT. If the owner of this NFT transfers a specified amount of exercise assets before the expiration date, he will receive the amount of the underlying assets you transferred when entering into the contract</value>
  </data>
  <data name="RedEnvelope_Intro" xml:space="preserve">
    <value>You will pass in a certain amount of assets and get a red envelope NFT. Then you can send the red envelope NFT homepage to your community and let members try their luck. The rule of the red envelope is that an address can only receive it once, so if Repeated withdrawals from the same address will fail. Opensea supports 0 price orders. Come and try it.</value>
  </data>
  <data name="Roulette_Intro" xml:space="preserve">
    <value>You will issue your own roulette NFT. The address that owns this NFT will have the right to place bets. After placing the bet, the right to place bets will be consumed and the prize pool will accumulate. After you draw the prize, a lucky player will win the funds in the prize pool.</value>
  </data>
  <data name="Cta1_Header" xml:space="preserve">
    <value>Mint your Options NFT</value>
  </data>
  <data name="Cta1_Intro" xml:space="preserve">
    <value>Interested in trading? try our Options NFT, you trade NFT as Options, no centerilized account needed.</value>
  </data>
  <data name="Cta2_Header" xml:space="preserve">
    <value>Trade Lottery</value>
  </data>
  <data name="Cta2_Intro" xml:space="preserve">
    <value>In realworld, only the company can issue a lottery, normal users can only buy lottery, but in web3 world, you mint a NFT, deposit some money in it, then you can sell it on NFT markets, you define the sell price, NFT owners can draw the lottery and only one lucky guy can win the prize.</value>
  </data>
  <data name="Cta3_Header" xml:space="preserve">
    <value>Send Red Envelope to your friends</value>
  </data>
  <data name="Cta3_Intro" xml:space="preserve">
    <value>If you run a community, or just want to give some lucky money to your friends, try using our RedEnvelope NFT, the NFT holders have the right to open the red envelope and get the underlying money</value>
  </data>
  <data name="Cta4_Header" xml:space="preserve">
    <value>Play Roulette game</value>
  </data>
  <data name="Cta4_Intro" xml:space="preserve">
    <value>People who mint the NFT is the owner of the table, he then sell it in NFT markets, people who bought the NFT has the right to bet some money in, then the owner can finish this round and choose a winner randomly and win the prize, it looks like a gamble but it actually not and I don't want it to be, just hope people can get fun.</value>
  </data>
  <data name="FAQ_A1" xml:space="preserve">
    <value>I want to create a membership NFT collection on opensea, people who own the membership NFT can use Deswap without fees, currently all the mint operation at Deswap
costs 0.001 ether, so become a member would save a lot, never the less the NFT would become more valuable in the future the community becomes larger.</value>
  </data>
  <data name="FAQ_A2" xml:space="preserve">
    <value>No particular time now, I want to launch the membership NFT first, then deploy the DAO contract and then airdrop some governor tokens to some of the membership NFT owners.</value>
  </data>
  <data name="FAQ_A3" xml:space="preserve">
    <value>The red envelope NFT is designed that every address can only buy once and open once, if you choose to buy more than 1, you would see errors.</value>
  </data>
  <data name="FAQ_Q1" xml:space="preserve">
    <value>What would the Deswap membership be like?</value>
  </data>
  <data name="FAQ_Q2" xml:space="preserve">
    <value>When will you launch the DAO?</value>
  </data>
  <data name="FAQ_Q3" xml:space="preserve">
    <value>I can't buy red envelope NFT</value>
  </data>
  <data name="Feature1_Header" xml:space="preserve">
    <value>Democratization</value>
  </data>
  <data name="Feature1_Intro" xml:space="preserve">
    <value>In Web2 world, it's almost impossible for a normal person the run a options exchange or a lottery company, but in Web3 world, with the help of Deswap, you can do these with little cost. If you are good enough, you can get rich. I believe democracy will eventually defeat autocracy.</value>
  </data>
  <data name="Feature2_Header" xml:space="preserve">
    <value>Privacy</value>
  </data>
  <data name="Feature2_Intro" xml:space="preserve">
    <value>We don't track your privacy, we don't need your account, your email, your phone number... As long as you have a web3 wallet installed, you can get started.</value>
  </data>
  <data name="Feature3_Header" xml:space="preserve">
    <value>DAO</value>
  </data>
  <data name="Feature3_Intro" xml:space="preserve">
    <value>We are a DAO, no one owns the platform, and no one can destroy it. With more people using it, our community will become better.</value>
  </data>
  <data name="Features" xml:space="preserve">
    <value>Features</value>
  </data>
  <data name="Governor_Intro" xml:space="preserve">
    <value>Currently Deswap is my personal side project, I designed the website, wrote the code,
I'm planning to build a DAO to governor the platform in the future. Anyone want to corporate
can contact me</value>
  </data>
  <data name="BlackJack" xml:space="preserve">
    <value>BlackJack</value>
  </data>
  <data name="BlackJack_Intro" xml:space="preserve">
    <value>mint a BlackJack NFT means you own this desk, you are the dealer, you can then sell those NFTs and invite BlackJack NFT holders to come to play with you.</value>
  </data>
  <data name="MintSucceedGoTrade_Stmt" xml:space="preserve">
    <value>mint succeed, go to trade.</value>
  </data>
  <data name="Docs" xml:space="preserve">
    <value>Docs</value>
  </data>
</root>
