@inject HttpClient Http
@inject ILogger<AppContractDetail> Logger
@inject MetamaskHostProvider _metamaskHostProvider
@inject Web3Service _web3Service
@inject ToastService toastService
@inject NftApi _nftApi
@inject IStringLocalizer<SharedResource> Loc

@page "/app/{NetworkName}/{ContractAddress}/{TokenId:long}"
@layout AppLayout

<PageTitle>@Title(ContractKind)</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView Roles="EthereumConnected">
        <Authorized>
            <section class="bg-gray-50 dark:bg-gray-900 my-10">
                <div class="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
                    <div class="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
                        <div class="flex flex-row items-center content-center justify-between p-6 space-y-4 md:space-y-6 sm:p-8">
                            <h1 class="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                                @Title(ContractKind)
                            </h1>
                            <div class="flex flex-row items-center content-center justify-between">
                                @if (!string.IsNullOrEmpty(OpenseaUrl))
                                {
                                    <CopyToClickboard TextToCopy="@OpenseaUrl" IconPath="/img/opensea_logo.svg" Name="" />
                                }
                                @if (!string.IsNullOrEmpty(EtherscanUrl))
                                {
                                    <CopyToClickboard TextToCopy="@EtherscanUrl" IconPath="/img/etherscan_logo.svg" Name="" />
                                }
                                @if (!string.IsNullOrEmpty(MetamaskDeepLink))
                                {
                                    <CopyToClickboard TextToCopy="@MetamaskDeepLink" IconPath="/img/metamask_logo.svg" Name="" />
                                }
                            </div>
                        </div>
                        @if (ContractKind == "Barter")
                        {
                            <BarterDetail NetworkName="@NetworkName" ContractAddress="@ContractAddress" TokenId="@TokenId" />
                        }
                        else if (ContractKind == "Lottery")
                        {
                            <LotteryDetail NetworkName="@NetworkName" ContractAddress="@ContractAddress" TokenId="@TokenId" />
                        }
                        else if (ContractKind == "RedEnvelope")
                        {
                            <RedEnvelopeDetail NetworkName="@NetworkName" ContractAddress="@ContractAddress" TokenId="@TokenId" />
                        }
                        else if (ContractKind == "Roulette")
                        {
                            <RouletteDetail NetworkName="@NetworkName" ContractAddress="@ContractAddress" TokenId="@TokenId" />
                        }
                        else if (ContractKind == "Sicbo")
                        {
                            <SicboDetail NetworkName="@NetworkName" ContractAddress="@ContractAddress" TokenId="@TokenId" />
                        }
                    </div>
                </div>
                <SingleToast />
            </section>
        </Authorized>
        <NotAuthorized>
            @Loc["Connect Wallet"]
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Parameter]
    public string ContractAddress { get; set; } = "";

    [Parameter]
    public long TokenId { get; set; }

    [Parameter]
    public string NetworkName { get; set; } = "";

    public NetworkCore? SelectedNetwork => NetworkConfig.GetNetworkByName(NetworkName);

    public string OpenseaUrl => SelectedNetwork?.BuildDetailUrl(ContractAddress, TokenId) ?? "";

    public string EtherscanUrl => (SelectedNetwork is not null && SelectedNetwork.EtherscanHost is not null) ? $"{SelectedNetwork.EtherscanHost}/address/{ContractAddress}" : "";

    public string MetamaskDeepLink => $"https://metamask.app.link/dapp/deswap.one/app/{NetworkName}/{ContractAddress}/{TokenId}";

    public string ContractKind => ContractConfig.GetContractKind(SelectedNetwork, ContractAddress);

    public string Title(string contractKind) {
        if (contractKind == "Barter")
        {
            return Loc["Barter"];
        }
        else if (contractKind == "Lottery")
        {
            return Loc["Lottery"];
        } else if (contractKind == "RedEnvelope")
        {
            return Loc["RedEnvelope"];
        }
        else if (contractKind == "Roulette")
        {
            return Loc["Roulette"];
        }
        else if (contractKind == "Sicbo")
        {
            return Loc["Sicbo"];
        }
        return "Unknown Contract";
    }
}
