@using Markdig
@using System.Text.RegularExpressions

@inject HttpClient Http
@inject ILogger<WritingDetail> Logger
@inject MetamaskHostProvider _metamaskHostProvider
@inject Web3Service _web3Service
@inject ToastService toastService
@inject NftApi _nftApi
@inject IStringLocalizer<SharedResource> Loc
@inject IMetamaskInterop _metamaskInterop;

@page "/app/{NetworkName}/writing/{ContractAddress}/{TokenId:long}"
@layout AppLayout

<PageTitle>@Loc["Writing"]</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView Roles="EthereumConnected">
        <Authorized>
            <main class="pt-8 pb-16 lg:pt-16 lg:pb-24 bg-white dark:bg-gray-900 antialiased text-base text-gray-500 dark:text-gray-400">
                <div class="flex justify-between px-4 mx-auto max-w-screen-xl ">
                    <article class="mx-auto w-full max-w-2xl format format-sm sm:format-base lg:format-lg format-blue dark:format-invert">
                        @((MarkupString)processMarkdownContent())
                    </article>
                </div>
                
                <div class="flex flex-row items-center mx-auto max-w-md justify-start gap-2 p-5">
                    @if (UserBalance is null)
                    {
                        <svg aria-hidden="true" class="inline w-10 h-10 text-gray-200 animate-spin dark:text-gray-600 fill-gray-600 dark:fill-gray-300" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                        </svg>
                    }
                    else if (UserBalance > 0)
                    {
                    <button type="button" class="inline-flex items-center text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700"
                        @onclick="HandleBurn">
                        @if (InBurnProgress)
                        {
                            <svg aria-hidden="true" class="inline w-4 h-4 text-gray-200 animate-spin dark:text-gray-600 fill-gray-600 dark:fill-gray-300" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                                <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                            </svg>
                        }
                        @Loc["Burn_Stmt"]
                        <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#991b1b" viewBox="0 0 24 24">
                            <path d="m12.75 20.66 6.184-7.098c2.677-2.884 2.559-6.506.754-8.705-.898-1.095-2.206-1.816-3.72-1.855-1.293-.034-2.652.43-3.963 1.442-1.315-1.012-2.678-1.476-3.973-1.442-1.515.04-2.825.76-3.724 1.855-1.806 2.201-1.915 5.823.772 8.706l6.183 7.097c.19.216.46.34.743.34a.985.985 0 0 0 .743-.34Z"/>
                        </svg>
                    </button>
                    }
                    else
                    {
                    <button type="button" class="inline-flex items-center text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700"
                        @onclick="HandleCollect">
                        @if (InBurnProgress)
                        {
                            <svg aria-hidden="true" class="inline w-4 h-4 text-gray-200 animate-spin dark:text-gray-600 fill-gray-600 dark:fill-gray-300" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                                <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                            </svg>
                        }
                        @Loc["Collect"]
                        <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12.01 6.001C6.5 1 1 8 5.782 13.001L12.011 20l6.23-7C23 8 17.5 1 12.01 6.002Z"/>
                        </svg>
                    </button>
                    }
                    @if (hasIpfsLink)
                    {
                    <select id="ipfs_gateway" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                        @bind="@_selectedIpfsGateway"
                        >
                        <option value="https://ipfs.io">ipfs.io</option>
                        <option value="https://gateway.pinata.cloud">pinata</option>
                        <option value="https://cloudflare-ipfs.com">cloudflare</option>
                        <option value="http://127.0.0.1:8080">local</option>
                    </select>
                    }
                </div>
            </main>
        </Authorized>
        <NotAuthorized>
            @Loc["Connect Wallet"]
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Parameter]
    public string ContractAddress { get; set; } = "";

    [Parameter]
    public long TokenId { get; set; }

    [Parameter]
    public string NetworkName { get; set; } = "";

    private string rawContent = "";

    private decimal DefaultPrice = 0;

    private string? _selectedIpfsGateway = "https://ipfs.io";

    private bool hasIpfsLink = false;

    private string processMarkdownContent()
    {
        Logger.LogInformation("process markdown content, gateway: {}", _selectedIpfsGateway);
        string pattern = @"ipfs://(.*?)";
        string replacement = $"{_selectedIpfsGateway}/ipfs/$1";
        string newContent = Regex.Replace(rawContent, pattern, replacement);
        if (newContent != rawContent)
        {
            hasIpfsLink = true;
        }
        return Markdown.ToHtml(newContent);
    }

    public UserWritingNFT? Token { get; set; }

    public int? UserBalance { get; set; }

    private async Task initTokens()
    {
        string metadataUri = await _web3Service.GetUri(ContractAddress, TokenId);
        Token = UserWritingNFT.FromStr(_metamaskHostProvider.SelectedNetworkChainId, ContractAddress, TokenId, metadataUri);

        var tokenMetadata = await _web3Service.GetWritingContent(TokenId, ContractAddress);
        rawContent = tokenMetadata.Content;
        DefaultPrice = Web3.Convert.FromWei(tokenMetadata.CollectPrice, 18); // Hardcode to 18 decimals

        UserBalance = await _web3Service.Erc1155BalanceOf(_metamaskHostProvider.SelectedAccount, ContractAddress, TokenId);
    }

    protected override void OnInitialized()
    {
        _metamaskHostProvider.NetworkChanged += MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        await initTokens();
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task MetamaskHostProvider_NetworkChainIdChanged(long chainId)
    {
        Logger.LogInformation("chan id callback");
        var targetNetwork = NetworkConfig.GetNetworkByName(NetworkName);
        if (targetNetwork is not null && targetNetwork.ChainId != chainId)
        {
            var p = new Dictionary<string, string>();
            p.Add("chainId", "0x" + Convert.ToString(targetNetwork.ChainId, 16));
            await _metamaskInterop.SendAsync(new Nethereum.JsonRpc.Client.RpcMessages.RpcRequestMessage(null, "wallet_switchEthereumChain", p));
        }

        await initTokens();
        await InvokeAsync(() => this.StateHasChanged());
    }

    public void Dispose()
    {
        _metamaskHostProvider.NetworkChanged -= MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Token is null && _metamaskHostProvider.SelectedNetworkChainId > 0)
            {
                await initTokens();
            }
            await InvokeAsync(() => this.StateHasChanged());
        }
    }

    private bool InBurnProgress = false;

    private async Task HandleBurn()
    {
        InBurnProgress = true;
        try
        {
            await _web3Service.BurnWriting(
                TokenId,
                Token!.Contract
            );

            toastService.ShowToast(Loc["TxSuccess_Stmt"], ToastLevel.Success);

            await Task.Delay(3000);

            await initTokens();
        }
        catch (Nethereum.JsonRpc.Client.RpcResponseException e)
        {
            if (e.Message.Contains("User denied transaction signature"))
            {
                toastService.ShowToast(Loc["TxCancelled_Stmt"], ToastLevel.Error);
            }
        }
        finally
        {
            InBurnProgress = false;
        }
    }

    private async Task HandleCollect()
    {
        Logger.LogInformation("handle collect");
        InBurnProgress = true;
        try
        {
            await _web3Service.CollectWriting(
                TokenId,
                1,
                DefaultPrice,
                Token!.Contract
            );

            toastService.ShowToast(Loc["TxSuccess_Stmt"], ToastLevel.Success);

            await Task.Delay(3000);

            await initTokens();
        }
        catch (Nethereum.JsonRpc.Client.RpcResponseException e)
        {
            if (e.Message.Contains("User denied transaction signature"))
            {
                toastService.ShowToast(Loc["TxCancelled_Stmt"], ToastLevel.Error);
            }
        }
        finally
        {
            InBurnProgress = false;
        }
    }
}
