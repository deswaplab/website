@page "/app/blackjack"

@layout AppLayout
@inject ILogger<AppBlackJack> Logger
@inject MetamaskHostProvider _metamaskHostProvider
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IJSRuntime JS
@inject ToastService toastService
@inject Web3Service _web3Service
@inject IStringLocalizer<SharedResource> Loc
@inject PriceService _priceService
<PageTitle>@Loc["BlackJack"]</PageTitle>

<section class="bg-gray-50 dark:bg-gray-900">
    <div class="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
        <CascadingAuthenticationState>
            <AuthorizeView Roles="EthereumConnected">
                <Authorized>
                    <div class="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
                        <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
                            <h1 class="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                                @Loc["BlackJack"]
                            </h1>

                            <p class="mb-5 text-xs font-thin text-gray-900 dark:text-gray-300">@Loc["BlackJack_Intro"]</p>

                            <form class="space-y-4 md:space-y-6">
                                <div>
                                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">@Loc["Select Token Pair"]</label>
                                    <select class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                        @bind:get="SelectedContractName"
                                        @bind:event="onchange"
                                        @bind:set="ChangeSelectedContractName"
                                        >
                                        <option></option>
                                        @foreach(var contract in AllContracts)
                                        {
                                            <option value="@contract.Name">@contract.Name</option>
                                        }
                                    </select>
                                </div>

                            </form>
                            <ol class="space-y-4 md:space-y-6">
                                <li>
                                    <MintProgressButton Text=@($"1. {Loc["Mint"]}") CurrentProgress="@Steps[0]" ClickCallback="Mint" />
                                </li>
                            </ol>
                        </div>
                    </div>
                    <SingleToast />
                </Authorized>
                <NotAuthorized>
                    <LoginButton />
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
    </div>
</section>

@code {
    protected override void OnInitialized()
    {
        _metamaskHostProvider.NetworkChanged += MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task MetamaskHostProvider_NetworkChainIdChanged(long chainId)
    {
        await InvokeAsync(() => this.StateHasChanged());
    }

    public void Dispose()
    {
        _metamaskHostProvider.NetworkChanged -= MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
    }

    public IList<BlackJackContract> AllContracts => BlackJackContracts.Inner
        .Where(p => p.Network.ChainId == _metamaskHostProvider.SelectedNetworkChainId)
        .ToList();

    public BlackJackContract? SelectedContract { get; set; } = null;

    public string SelectedContractName {get; set;} = "";

    public void ChangeSelectedContractName(string? value)
    {
        SelectedContractName = value ?? "";
        SelectedContract = AllContracts.Where(p => p.Name == value).FirstOrDefault();

        ResetSteps();
    }

    public bool IsFormValid => SelectedContract is not null;

    public MintProgressButton.Progress[] Steps = [
        MintProgressButton.Progress.NotStarted,
    ];

    private void ResetSteps()
    {
        Steps = [
            MintProgressButton.Progress.NotStarted,
        ];
        if (IsFormValid)
        {
            Steps[0] = MintProgressButton.Progress.ToStart;
        }
    }

    private bool isSupportedNetwork()
    {
        Logger.LogInformation("start check supported chain");
        var currentNetwork = SupportedNetworks.GetNetwork(_metamaskHostProvider.SelectedNetworkChainId);
        if (currentNetwork is not null)
        {
            return true;
        }
        return false;
    }

    private async Task Mint()
    {
        if (!isSupportedNetwork())
        {
            toastService.ShowToast(Loc["InvalidNetwork_Stmt"], ToastLevel.Error);
            return;
        }
        Steps[0] = MintProgressButton.Progress.InProgress; // 一点击就该置灰
        try {
            var txHash = await _web3Service.MintBlackJack(
                1000,
                SelectedContract!.NftAddress
            );
            Steps[0] = MintProgressButton.Progress.Finished;

            toastService.ShowToast(Loc["OptionsMinted_Stmt"], ToastLevel.Success);
        } catch (Nethereum.JsonRpc.Client.RpcResponseException e) {
            if (e.Message.Contains("User denied transaction signature"))
            {
                toastService.ShowToast(Loc["TxCancelled_Stmt"], ToastLevel.Error);
            }
            Steps[0] = MintProgressButton.Progress.ToStart;
        }
    }
}
