@page "/app/users/{address}/tokens/{*network}"
@layout AppLayout
@inject HttpClient Http
@inject ILogger<AppUserTokens> Logger
@using System.Text.Json.Serialization
@inject StateContainer StateContainer

<PageTitle>App user Tokens</PageTitle>


<section class="bg-gray-50 dark:bg-gray-900 my-10">
    @if (Tokens.Count > 0)
    {
        <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 px-64 mx-auto lg:py-0">
        @foreach (var token in Tokens)
        {
            @if (token.Token is not null && token.Token.Metadata is not null)
            {
                <div class="flex flex-col items-center py-2 max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                    <a href=@($"https://testnets.opensea.io/assets/sepolia/0xe10c396c0635bee8986de9a870852f528a0e0107/{token.Token.TokenId}") target="_blank">
                        <img class="rounded-t-lg" src="@token.Token.Metadata.ImageOriginal" alt="" />
                    </a>
                    @if (address == StateContainer.SelectedAccount)
                    {
                        <div class="flex flex-row items-center gap-2 p-5">
                            @if (canList(token.Token.Attributes))
                            {
                                <a href="@buildListUrl(token.Token)" target="_blank" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                    List
                                </a>
                            }
                            @if (canExercise(token.Token.Attributes))
                            {
                                <a href="#" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                    Exercise
                                </a>
                            }
                            @if (canBurn(token.Token.Attributes))
                            {
                                <a href="#" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                    Burn
                                </a>
                            }
                        </div>
                    }
                </div>
            }
        }
        </div>
    }
    else
    {
        <div role="status" class="flex flex-col items-center">
            <svg aria-hidden="true" class="inline w-10 h-10 text-gray-200 animate-spin dark:text-gray-600 fill-gray-600 dark:fill-gray-300" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
            </svg>
            <span class="sr-only">Loading...</span>
        </div>
    }

</section>


@code {
    [Parameter]
    public string address {get; set;} = "0x0";

    [Parameter]
    public string? network {get; set;}

    private string buildListUrl(ReservoirToken token)
    {
        string network = EthNetwork.ChainIdToNetwork(token.ChainId);
        return $"https://testnets.opensea.io/assets/{network}/{token.Contract}/{token.TokenId}/sell";
    }

    private bool canExercise(IList<ReservoirTokenAttribute> tokenAttributes)
    {
        bool inMaturityDate = false;

        foreach(var attr in tokenAttributes)
        {
            if (attr.Key == "maturityDate" && attr.Value is not null)
            {
                var maturityDate = DateTimeOffset.FromUnixTimeSeconds(long.Parse(attr.Value));
                var now = DateTime.Now;
                if (now >= maturityDate && now < maturityDate.AddDays(1))
                {
                    inMaturityDate = true;
                }
            }
        }
        if (inMaturityDate)
        {
            return true;
        }
        return false;
    }

    private bool canBurn(IList<ReservoirTokenAttribute> tokenAttributes)
    {
        bool afterMaturityDate = false;

        foreach(var attr in tokenAttributes)
        {
            if (attr.Key == "maturityDate" && attr.Value is not null)
            {
                var maturityDate = DateTimeOffset.FromUnixTimeSeconds(long.Parse(attr.Value));
                var now = DateTime.Now;
                if (now >= maturityDate.AddDays(1))
                {
                    afterMaturityDate = true;
                }
            }
        }
        if (afterMaturityDate)
        {
            return true;
        }
        return false;
    }

    private bool canList(IList<ReservoirTokenAttribute> tokenAttributes)
    {
        bool writerIsOwner = false;

        foreach(var attr in tokenAttributes)
        {
            if (attr.Key == "writer" && attr.Value is not null)
            {
                if (attr.Value == address)
                {
                    writerIsOwner = true;
                }
            }
        }
        if (writerIsOwner && !canBurn(tokenAttributes) && !canExercise(tokenAttributes))
        {
            return true;
        }
        return false;
    }

    private IList<ReservoirTokenResponse> Tokens {get; set;} = [];

    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;

        var tokensResponse = await Http.GetFromJsonAsync<ReservoirTokensResponse>($"https://api-sepolia.reservoir.tools/users/{address}/tokens/v8?contract=0xe10C396C0635BEE8986de9A870852F528A0E0107&includeAttributes=true");
        Tokens = tokensResponse.Tokens;
        Logger.LogInformation($"total tokens: {tokensResponse.Tokens.Count}");
        Logger.LogInformation($"Tokens 0: {Tokens[0].Token.Metadata.ImageOriginal}");
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

    public class ReservoirTokensResponse
    {
        [JsonPropertyName("tokens")]
        public IList<ReservoirTokenResponse> Tokens { get; set; } = [];

    }

    public class ReservoirTokenResponse
    {
        [JsonPropertyName("token")]
        public ReservoirToken? Token { get; set; }
        
    }
    public class ReservoirToken
    {
        [JsonPropertyName("chainId")]
        public long ChainId { get; set; }

        [JsonPropertyName("contract")]
        public string? Contract { get; set; }

        [JsonPropertyName("tokenId")]
        public string? TokenId { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("metadata")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public ReservoirTokenMetadata? Metadata { get; set; }

        [JsonPropertyName("attributes")]
        public IList<ReservoirTokenAttribute> Attributes { get; set; } = [];
        
    }

    public class ReservoirTokenMetadata
    {
        [JsonPropertyName("imageOriginal")]
        public string? ImageOriginal { get; set; }
    }

    public class ReservoirTokenAttribute
    {
        [JsonPropertyName("key")]
        public string? Key { get; set; }

        [JsonPropertyName("kind")]
        public string? Kind { get; set; }

        [JsonPropertyName("value")]
        public string? Value { get; set; }

    }
}
