@page "/app/users/me"
@layout AppLayout
@inject HttpClient Http
@inject ILogger<AppUserTokens> Logger
@inject MetamaskHostProvider _metamaskHostProvider;

@using System.Text.Json.Serialization
@using System.Numerics;
@using Nethereum.Web3;
@using Nethereum.Util;
@using Nethereum.Contracts;

<PageTitle>My Tokens</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView Roles="EthereumConnected">
        <Authorized>
            <section class="bg-gray-50 dark:bg-gray-900 my-10">
                @if (loadingTokens)
                {
                    <div role="status" class="flex flex-col items-center">
                        <svg aria-hidden="true" class="inline w-10 h-10 text-gray-200 animate-spin dark:text-gray-600 fill-gray-600 dark:fill-gray-300" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                        </svg>
                        <span class="sr-only">Loading...</span>
                    </div>
                }
                else
                {
                    @if (Tokens.Count > 0)
                    {
                        <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 px-64 mx-auto lg:py-0">
                        @foreach (var token in Tokens)
                        {
                            @if (token.Token is not null 
                                && token.Token.TokenId is not null 
                                && token.Token.Contract is not null 
                                && token.Token.Metadata is not null
                                && token.Token.Attributes.Count > 0)
                            {
                                <div class="flex flex-col items-center py-2 max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                                    <a href="@buildOpenseaTokenUrl(token.Token)" target="_blank">
                                        <img class="rounded-t-lg" src="@token.Token.Metadata.ImageOriginal" alt="" />
                                    </a>
                                        <div class="flex flex-row items-center gap-2 p-5">
                                            @if (canList(token.Token.Attributes))
                                            {
                                                <a href="@buildListUrl(token.Token)" target="_blank" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                                    List
                                                </a>
                                            }
                                            @if (canExercise(token.Token.Attributes))
                                            {
                                                <button type="button" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 @ExerciseButtonDisabledClass"
                                                    @onclick="async () => await HandleExercise(token.Token.TokenId, token.Token.Contract, token.Token.Attributes)"
                                                    disabled=@ExerciseButtonDisabled
                                                >
                                                    Exercise
                                                </button>
                                            }
                                            @if (canBurn(token.Token.Attributes))
                                            {
                                                <button type="button" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 @BurnButtonDisabledClass"
                                                    @onclick="async () => await HandleBurn(token.Token.TokenId, token.Token.Contract)"
                                                    disabled=@BurnButtonDisabled
                                                >
                                                    Burn
                                                </button>
                                            }
                                        </div>
                                </div>
                            }
                        }
                        </div>
                    }
                    else
                    {
                        if (SupportedNetworks.GetNetwork(_metamaskHostProvider.SelectedNetworkChainId) is not null)
                        {
                            <h1 class="px-64 mx-auto text-yellow-800 bg-yellow-50 dark:bg-gray-800 dark:text-yellow-300">No tokens for address: @_metamaskHostProvider.SelectedAccount on chain: @_metamaskHostProvider.SelectedNetworkChainId</h1>
                        }
                    }
                }
            </section>
        </Authorized>
        <NotAuthorized>
            Please connect your wallet
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
@code {
    private bool loadingTokens = false;

    private string buildListUrl(ReservoirToken token)
    {
        var network = SupportedNetworks.GetNetwork(token.ChainId);
        return $"{network!.OpenseaHost}/{token.Contract}/{token.TokenId}/sell";
    }

    private string buildOpenseaTokenUrl(ReservoirToken token)
    {
        var network = SupportedNetworks.GetNetwork(token.ChainId);
        return $"{network!.OpenseaHost}/{token.Contract}/{token.TokenId}";
    }

    private bool canExercise(IList<ReservoirTokenAttribute> tokenAttributes)
    {
        bool inMaturityDate = false;

        foreach(var attr in tokenAttributes)
        {
            if (attr.Key == "maturityDate" && attr.Value is not null)
            {
                inMaturityDate = true; // TODO: debug purpose
                var maturityDate = DateTimeOffset.FromUnixTimeSeconds(long.Parse(attr.Value));
                var now = DateTime.Now;
                if (now >= maturityDate && now < maturityDate.AddDays(1))
                {
                    inMaturityDate = true;
                }
            }
        }
        if (inMaturityDate)
        {
            return true;
        }
        return false;
    }

    private bool canBurn(IList<ReservoirTokenAttribute> tokenAttributes)
    {
        bool afterMaturityDate = false;

        foreach(var attr in tokenAttributes)
        {
            if (attr.Key == "maturityDate" && attr.Value is not null)
            {
                var maturityDate = DateTimeOffset.FromUnixTimeSeconds(long.Parse(attr.Value));
                var now = DateTime.Now;
                if (now >= maturityDate.AddDays(1))
                {
                    afterMaturityDate = true;
                }
            }
        }
        if (afterMaturityDate)
        {
            return true;
        }
        return false;
    }

    private bool canList(IList<ReservoirTokenAttribute> tokenAttributes)
    {
        bool writerIsOwner = false;

        foreach(var attr in tokenAttributes)
        {
            if (attr.Key == "writer" && attr.Value is not null)
            {
                if (attr.Value == _metamaskHostProvider.SelectedAccount)
                {
                    writerIsOwner = true;
                }
            }
        }
        if (writerIsOwner && !canBurn(tokenAttributes) && !canExercise(tokenAttributes))
        {
            return true;
        }
        return false;
    }

    private IList<ReservoirTokenResponse> Tokens {get; set;} = [];

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
        _metamaskHostProvider.NetworkChanged += MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        await fetchTokens();
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task MetamaskHostProvider_NetworkChainIdChanged(long chainId)
    {
        await fetchTokens();
        await InvokeAsync(() => this.StateHasChanged());
    }

    // TODO: 加上一个合约筛选器
    private async Task fetchTokens()
    {
        Logger.LogInformation($"fetch tokens, chainId={_metamaskHostProvider.SelectedNetworkChainId}");
        var curNetwork = SupportedNetworks.GetNetwork(_metamaskHostProvider.SelectedNetworkChainId);
        if (curNetwork is not null)
        {
            loadingTokens = true;
            var tokensResponse = await Http.GetFromJsonAsync<ReservoirTokensResponse>($"{curNetwork.ReservoirHost}/users/{_metamaskHostProvider.SelectedAccount}/tokens/v8?contract=0xe10C396C0635BEE8986de9A870852F528A0E0107&includeAttributes=true&limit=200");
            if (tokensResponse is not null && tokensResponse.Tokens is not null)
            {
                Tokens = tokensResponse!.Tokens;
            }
            loadingTokens = false; // 网络请求结束
        }
    }

    public void Dispose()
    {
        _metamaskHostProvider.NetworkChanged -= MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
    }

    public class ReservoirTokensResponse
    {
        [JsonPropertyName("tokens")]
        public IList<ReservoirTokenResponse> Tokens { get; set; } = [];

    }

    public class ReservoirTokenResponse
    {
        [JsonPropertyName("token")]
        public ReservoirToken? Token { get; set; }

    }
    public class ReservoirToken
    {
        [JsonPropertyName("chainId")]
        public long ChainId { get; set; }

        [JsonPropertyName("contract")]
        public string? Contract { get; set; }

        [JsonPropertyName("tokenId")]
        public string? TokenId { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("metadata")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public ReservoirTokenMetadata? Metadata { get; set; }

        [JsonPropertyName("attributes")]
        public IList<ReservoirTokenAttribute> Attributes { get; set; } = [];
    }

    public class ReservoirTokenMetadata
    {
        [JsonPropertyName("imageOriginal")]
        public string? ImageOriginal { get; set; }
    }

    public class ReservoirTokenAttribute
    {
        [JsonPropertyName("key")]
        public string? Key { get; set; }

        [JsonPropertyName("kind")]
        public string? Kind { get; set; }

        [JsonPropertyName("value")]
        public string? Value { get; set; }

    }

    private bool ExerciseButtonDisabled = false;

    private string ExerciseButtonDisabledClass => ExerciseButtonDisabled ? "cursor-not-allowed" : "";

    private async Task HandleExercise(string tokenId, string nftContractAddress, IList<ReservoirTokenAttribute> tokenAttributes)
    {
        Logger.LogInformation($"start handle exercise {tokenId}, {nftContractAddress}");
        ExerciseButtonDisabled = true;
        string optionsKind = "";
        BigInteger baseAssetAmount = 0;
        BigInteger quoteAssetAmount = 0;
        foreach(var attr in tokenAttributes)
        {
            if (attr.Key == "optionsKind" && attr.Value is not null)
            {
                optionsKind = attr.Value;
            }
            if (attr.Key == "baseAssetAmount" && attr.Value is not null)
            {
                baseAssetAmount = BigInteger.Parse(attr.Value);
            }
            if (attr.Key == "quoteAssetAmount" && attr.Value is not null)
            {
                quoteAssetAmount = BigInteger.Parse(attr.Value);
            }
        }
        var allTokenPairs = new TokenPairs();
        var tokenPair = allTokenPairs.FindByNftContract(nftContractAddress);
        if (tokenPair is null)
        {
            // TODO: 使用更好的错误提示
            throw new Exception("unsupported nft contract");
        }

        string payAssetAddress = "";
        BigInteger payAssetAmount = 0;
        if (optionsKind == "call")
        {
            payAssetAddress = tokenPair.QuoteAssetAddress;
            payAssetAmount = quoteAssetAmount;

        } else if (optionsKind == "put") {
            payAssetAddress = tokenPair.BaseAssetAddress;
            payAssetAmount = baseAssetAmount;
        }

        // 1. Check balance
        var userPayAssetBalance = await GetUserBalance(_metamaskHostProvider.SelectedAccount, payAssetAddress);
        if (userPayAssetBalance < payAssetAmount)
        {
            throw new Exception("current user doesnt have enough balance to exercise");
        }

        var userPayAllowance = await GetAllowance(_metamaskHostProvider.SelectedAccount, nftContractAddress, payAssetAddress);
        if (userPayAllowance < payAssetAmount)
        {
            // DO approve and wait seconds
            await Approve(payAssetAddress, nftContractAddress, payAssetAmount);
            await Task.Delay(3000);
            userPayAllowance = await GetAllowance(_metamaskHostProvider.SelectedAccount, nftContractAddress, payAssetAddress);
            if (userPayAllowance < payAssetAmount)
            {
                ExerciseButtonDisabled = false;
                throw new Exception("after approve, allowance is still not enough");
            }
        }
        var web3 = await _metamaskHostProvider.GetWeb3Async();
        var contract = web3.Eth.GetContract(OptionsNFT.abi, nftContractAddress);
        var callsFunction = contract.GetFunction("exercise");
        var gas = await callsFunction.EstimateGasAsync(
            long.Parse(tokenId)
        );
        try {
            var receipt = await callsFunction.SendTransactionAndWaitForReceiptAsync(
                _metamaskHostProvider.SelectedAccount,
                gas,
                new Nethereum.Hex.HexTypes.HexBigInteger(0),
                CancellationToken.None,
                long.Parse(tokenId)
            );
            Logger.LogInformation($"exercise finished, tx: {receipt.TransactionHash.ToString()}");
        } catch (Nethereum.JsonRpc.Client.RpcResponseException e) {
            if (e.Message.Contains("User denied transaction signature"))
            {
                // TODO: 显示取消的toast
                Logger.LogInformation("user cancel tx");
            }
        } finally {
            ExerciseButtonDisabled = false;
        }
        // 从 Tokens 删除当前行权的token，以实现页面刷新
        Tokens.Remove(Tokens.First(item => item.Token!.TokenId == tokenId));
    }

    private bool BurnButtonDisabled = false;

    private string BurnButtonDisabledClass => BurnButtonDisabled ? "cursor-not-allowed" : "";

    private async Task HandleBurn(string tokenId, string nftContractAddress)
    {
        Logger.LogInformation($"handle burn");
        BurnButtonDisabled = true; // 弹出小狐狸期间禁止点击
        var web3 = await _metamaskHostProvider.GetWeb3Async();
        var contract = web3.Eth.GetContract(OptionsNFT.abi, nftContractAddress);
        var callsFunction = contract.GetFunction("burn");
        var gas = await callsFunction.EstimateGasAsync(
            long.Parse(tokenId)
        );
        try {
            var receipt = await callsFunction.SendTransactionAndWaitForReceiptAsync(
                _metamaskHostProvider.SelectedAccount,
                gas,
                new Nethereum.Hex.HexTypes.HexBigInteger(0),
                CancellationToken.None,
                long.Parse(tokenId)
            );
            Logger.LogInformation($"burn finished, tx: {receipt.TransactionHash.ToString()}");
            // TODO: 显示成功的toast
        } catch (Nethereum.JsonRpc.Client.RpcResponseException e) {
            Logger.LogInformation("burn failed");
            Logger.LogError($"{e.ToString()}, {e.Message}");
            if (e.Message.Contains("User denied transaction signature"))
            {
                // TODO: 显示取消的toast
                Logger.LogInformation("user cancel tx");
            }
        } finally {
            BurnButtonDisabled = false;
        }

        Tokens.Remove(Tokens.First(item => item.Token!.TokenId == tokenId));
    }


    [Nethereum.ABI.FunctionEncoding.Attributes.Function("allowance", "uint256")]
    public class AllowanceFunction : FunctionMessage
    {
        [Nethereum.ABI.FunctionEncoding.Attributes.ParameterAttribute("address", "addr1", 1)]
        public string Addr1 { get; set; } = "";

        [Nethereum.ABI.FunctionEncoding.Attributes.ParameterAttribute("address", "addr2", 2)]
        public string Addr2 { get; set; } = "";

    }

    private async Task<BigInteger> GetAllowance(string payAddr, string recvAddr, string contractAddress)
    {
        var allowanceFunctionMessage = new AllowanceFunction()
        {
            Addr1 = payAddr,
            Addr2 = recvAddr,
        };

        var web3 = await _metamaskHostProvider.GetWeb3Async();
        var handler = web3.Eth.GetContractQueryHandler<AllowanceFunction>();
        var balance = await handler.QueryAsync<BigInteger>(contractAddress, allowanceFunctionMessage);
        Logger.LogInformation($"user allowance: {balance}, {payAddr}, {recvAddr}, {contractAddress}");
        return balance;
    }

    [Nethereum.ABI.FunctionEncoding.Attributes.Function("balanceOf", "uint256")]
    public class BalanceOfFunction : FunctionMessage
    {
        [Nethereum.ABI.FunctionEncoding.Attributes.ParameterAttribute("address", "_owner", 1)]
        public string Owner { get; set; } = "";
    }

    private async Task<BigInteger> GetUserBalance(string userAddress, string contractAddress)
    {
        var balanceOfFunctionMessage = new BalanceOfFunction()
        {
            Owner = userAddress,
        };

        var web3 = await _metamaskHostProvider.GetWeb3Async();
        var balanceHandler = web3.Eth.GetContractQueryHandler<BalanceOfFunction>();
        var balance = await balanceHandler.QueryAsync<BigInteger>(contractAddress, balanceOfFunctionMessage);
        return balance;
    }

    private async Task Approve(string erc20ContractAddress, string nftContractAddress, BigInteger wad)
    {
        Logger.LogInformation("approve clicked");
        var web3 = await _metamaskHostProvider.GetWeb3Async();
        string erc20ApproveAbi = """[{"inputs":[{"internalType":"address","name":"guy","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]""";
        var contract = web3.Eth.GetContract(erc20ApproveAbi, erc20ContractAddress);
        var callsFunction = contract.GetFunction("approve");
        var gas = await callsFunction.EstimateGasAsync(
            nftContractAddress,
            wad
        );
        var receipt = await callsFunction.SendTransactionAndWaitForReceiptAsync(
            _metamaskHostProvider.SelectedAccount,
            gas,
            new Nethereum.Hex.HexTypes.HexBigInteger(0),
            CancellationToken.None,
            nftContractAddress,
            wad
        );
        Logger.LogInformation($"approve finished, tx: {receipt.TransactionHash.ToString()}");
    }
}
