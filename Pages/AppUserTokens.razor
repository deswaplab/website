@page "/app/users/{address}/tokens/{*network}"
@layout AppLayout
@inject HttpClient Http
@inject ILogger<AppUserTokens> Logger

@using System.Text.Json.Serialization

<PageTitle>App user Tokens</PageTitle>


<section class="bg-gray-50 dark:bg-gray-900 my-10">
    <div class="grid grid-cols-2 md:grid-cols-3 gap-4 px-64 mx-auto md:h-screen lg:py-0">
    @if (Tokens.Count > 0)
    {
        @foreach (var token in Tokens)
        {
            @if (token.Token.Metadata is not null)
            {
                <div class="flex flex-col items-center py-2 max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                    <a href=@($"https://testnets.opensea.io/assets/sepolia/0xe10c396c0635bee8986de9a870852f528a0e0107/{token.Token.TokenId}")>
                        <img class="rounded-t-lg" src="@token.Token.Metadata.ImageOriginal" alt="" />
                    </a>
                    <div class="p-5">
                        <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Here are the biggest enterprise technology acquisitions of 2021 so far, in reverse chronological order.</p>
                        <a href="#" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                            Read more
                            <svg class="rtl:rotate-180 w-3.5 h-3.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
                            </svg>
                        </a>
                    </div>
                </div>
            }
        }
    }
    </div>
</section>


@code {
    [Parameter]
    public string address {get; set;} = "0x0";

    [Parameter]
    public string? network {get; set;}

    private IList<ReservoirTokenResponse> Tokens {get; set;} = [];

    protected override async Task OnInitializedAsync()
    {
        var tokensResponse = await Http.GetFromJsonAsync<ReservoirTokensResponse>("https://api-sepolia.reservoir.tools/users/0x7e727520B29773e7F23a8665649197aAf064CeF1/tokens/v8?contract=0xe10C396C0635BEE8986de9A870852F528A0E0107&includeAttributes=true");
        Tokens = tokensResponse.Tokens;
        Logger.LogInformation($"total tokens: {tokensResponse.Tokens.Count}");
        Logger.LogInformation($"Tokens 0: {Tokens[0].Token.Metadata.ImageOriginal}");

        foreach(var token in Tokens)
        {
            if (token.Token.Metadata is not null)
            {
                Logger.LogInformation($"Tokens {token.Token.TokenId}: {token.Token.Metadata.ImageOriginal}");
            }
        }
    }

    public class ReservoirTokensResponse
    {
        [JsonPropertyName("tokens")]
        public IList<ReservoirTokenResponse> Tokens { get; set; } = [];

    }

    public class ReservoirTokenResponse
    {
        [JsonPropertyName("token")]
        public ReservoirToken? Token { get; set; }
        
    }
    public class ReservoirToken
    {

        [JsonPropertyName("contract")]
        public string? Contract { get; set; }

        [JsonPropertyName("tokenId")]
        public string? TokenId { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("metadata")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public ReservoirTokenMetadata? Metadata { get; set; }

        [JsonPropertyName("attributes")]
        public IList<ReservoirTokenMetadata> Attributes { get; set; } = [];
        
    }

    public class ReservoirTokenMetadata
    {
        [JsonPropertyName("imageOriginal")]
        public string? ImageOriginal { get; set; }
    }

    public class ReservoirTokenAttribute
    {
        [JsonPropertyName("key")]
        public string? Key { get; set; }

        [JsonPropertyName("kind")]
        public string? Kind { get; set; }

        [JsonPropertyName("value")]
        public string? Value { get; set; }

    }
}
