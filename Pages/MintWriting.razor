@using Markdig
@using System.Text.RegularExpressions

@page "/app/writing"

@layout AppLayout
@inject ILogger<MintWriting> Logger
@inject MetamaskHostProvider _metamaskHostProvider
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IJSRuntime JS
@inject ToastService toastService
@inject Web3Service _web3Service
@inject IStringLocalizer<SharedResource> Loc
<PageTitle>@Loc["Writing"]</PageTitle>

<section class="bg-gray-50 dark:bg-gray-900">
    <div class="flex flex-col items-stretch md:mx-96 px-6 mt-8">
        <form>
        <div class="w-full mb-4 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-700 dark:border-gray-600">
            <div class="flex items-center justify-between px-3 py-2 border-b dark:border-gray-600">
                <ul class="flex flex-wrap text-sm font-medium text-center text-gray-500 border-b border-gray-200 dark:border-gray-700 dark:text-gray-400">
                    <li class="me-2">
                        <button type="button" @onclick="switchToEditor" class="@getEditorTabClass()">Write</button>
                    </li>
                    <li class="me-2">
                        <button type="button" @onclick="switchToPreview" class="@getPreviewTabClass()">Preview</button>
                    </li>
                </ul>
            </div>
            <div class="px-4 py-2 bg-white rounded-b-lg dark:bg-gray-800">
                @if (currentTab == "editor")
                {
                <label for="editor" class="sr-only">Publish post</label>
                <textarea id="editor" rows="30" class="block w-full px-0 text-sm text-gray-800 bg-white border-0 focus:ring-0 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400" placeholder="Write an article..." required
                    @bind-value=markdownValue
                    @bind-value:event="onchange"
                    @bind-value:after="syncToLocalStorage"
                    ></textarea>
                }
                else
                {
                    <div class="block w-full px-0 text-sm text-gray-800 bg-white border-0 dark:bg-gray-800 focus:ring-0 dark:text-white">
                        @((MarkupString)getHtmlValue())
                    </div>
                }
            </div>
        </div>
        <div class="flex flex-row mx-auto px-6 py-8 max-w-md items-center justify-between">
            <CascadingAuthenticationState>
                <AuthorizeView Roles="EthereumConnected" Context="innerContext">
                    <Authorized>
                        <button type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                            @onclick="Mint"
                        >
                        @if (InProgress)
                        {
                            <svg aria-hidden="true" class="inline w-4 h-4 text-gray-200 animate-spin dark:text-gray-600 fill-gray-600 dark:fill-gray-300" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                                <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                            </svg>
                        }
                        @Loc["Mint"]
                        </button>
                    </Authorized>
                    <NotAuthorized>
                        <LoginButton />
                    </NotAuthorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
            <p class="mt-2 text-sm text-blue-600 dark:text-blue-500"><a href="@ContractTokensUrl">@Loc["Tokens"]</a></p>
            </div>
            @if (NewTokenId is not null)
            {
                <div class="mx-auto px-6 py-8 max-w-md">
                <p id="helper-text-explanation" class="mt-2 text-sm text-blue-600 dark:text-blue-500">
                    <a href="@SelectedNetwork!.BuildDetailUrl(_writing!, NewTokenId!.Value)">@Loc["MintSucceedGoTrade_Stmt"]</a>
                </p>
                </div>
            }
        </form>
    </div>
</section>

@code {
    private string markdownValue = "# Writing NFT\nYou are writing a new NFT, your words will be saved on blockchain forever...";

    private async Task getDefaultMarkdownValue()
    {
        string cachedValue = await JS.InvokeAsync<string>("localStorage.getItem", "writingContent");
        if (!string.IsNullOrEmpty(cachedValue))
        {
            markdownValue = cachedValue;
        }
    }

    private string? _selectedIpfsGateway = "https://ipfs.io";

    private string getHtmlValue()
    {
        string pattern = @"ipfs://(.*?)";
        string replacement = $"{_selectedIpfsGateway}/ipfs/$1";
        string newContent = Regex.Replace(markdownValue, pattern, replacement);
        return Markdown.ToHtml(newContent);
    }

    protected override async Task OnInitializedAsync()
    {
        _metamaskHostProvider.NetworkChanged += MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;

        await getDefaultMarkdownValue();
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task MetamaskHostProvider_NetworkChainIdChanged(long chainId)
    {
        await InvokeAsync(() => this.StateHasChanged());
    }

    public void Dispose()
    {
        _metamaskHostProvider.NetworkChanged -= MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
    }

    public long? NewTokenId = null;

    public NetworkCore? SelectedNetwork => NetworkConfig.GetNetwork(_metamaskHostProvider.SelectedNetworkChainId);

    private NFTContract? _writing => SelectedNetwork is not null ? ContractConfig.Writing[SelectedNetwork] : null;

    private string ContractTokensUrl => (SelectedNetwork is not null && _writing is not null) ? SelectedNetwork.BuildContractTokensUrl(_writing!) : "";

    private bool InProgress = false;

    private string parseTitle(string markdown)
    {
        var lines = markdown.Split('\n');
        if (lines.Length == 0)
        {
            return "";
        }
        return lines[0].Replace("#", "").Replace(" ", "");
    }

    private async Task syncToLocalStorage()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "writingContent", markdownValue);
    }

    private string currentTab = "editor";

    private string currentTabClass = "inline-block p-2 text-blue-600 bg-gray-100 rounded-t-lg active dark:bg-gray-800 dark:text-blue-500";

    private string otherTabClass = "inline-block p-2 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 dark:hover:text-gray-300";

    private string getEditorTabClass()
    {
        if (currentTab == "editor")
        {
            return currentTabClass;
        }
        return otherTabClass;
    }

    private string getPreviewTabClass()
    {
        if (currentTab == "editor")
        {
            return otherTabClass;
        }
        return currentTabClass;
    }

    private void switchToEditor()
    {
        if (currentTab != "editor")
        {
            currentTab = "editor";
        }
    }

    private void switchToPreview()
    {
        if (currentTab == "editor")
        {
            currentTab = "preview";
        }
    }

    private async Task Mint()
    {
        InProgress = true;
        try
        {
            NewTokenId = await _web3Service.MintWriting(
                parseTitle(markdownValue),
                markdownValue,
                _writing!.Address
            );

            toastService.ShowToast(Loc["TxSuccess_Stmt"], ToastLevel.Success);
        }
        catch (Nethereum.JsonRpc.Client.RpcResponseException e)
        {
            if (e.Message.Contains("User denied transaction signature"))
            {
                toastService.ShowToast(Loc["TxCancelled_Stmt"], ToastLevel.Error);
            }
        }
        finally
        {
            InProgress = false;
        }
    }
}
