@page "/app"
@layout AppLayout
@inject ILogger<AppMint> Logger
@inject MetamaskHostProvider _metamaskHostProvider;
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject IJSRuntime JS

@using Nethereum.Web3;
@using Nethereum.Contracts.CQS;
@using Nethereum.Util;
@using Nethereum.Web3.Accounts;
@using Nethereum.Hex.HexConvertors.Extensions;
@using Nethereum.Contracts;
@using Nethereum.Contracts.Extensions;
@using System.Numerics;
@using System.Security.Claims;
@using DeswapApp.Pages;

<PageTitle>Mint</PageTitle>

<section class="bg-gray-50 dark:bg-gray-900">
    <div class="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
        <CascadingAuthenticationState>
            <AuthorizeView Roles="EthereumConnected">
                <Authorized>
                    <div class="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
                        <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
                            <h1 class="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                                Mint
                            </h1>
                            <form class="space-y-4 md:space-y-6">
                                <div>
                                    <label for="tokenPairs"
                                        class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Select Token Pair</label>
                                    <select id="tokenPair"
                                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                        @bind:get="SelectedTokenPairName"
                                        @bind:event="onchange"
                                        @bind:set="ChangeSelectedTokenPairName"
                                        >
                                        @foreach(var tokenPair in AllTokenPairs.Inner)
                                        {
                                            <option value="@tokenPair.BaseAssetName/@tokenPair.QuoteAssetName">@tokenPair.BaseAssetName/@tokenPair.QuoteAssetName</option>
                                        }
                                    </select>
                                </div>
                                <div>
                                    <label for="optionsKind"
                                        class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Select Options Kind</label>
                                    <select id="optionsKind"
                                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                        @bind:get="SelectedOptionsKind"
                                        @bind:event="onchange"
                                        @bind:set="ChangeOptionsKind"
                                    >

                                        <option>calls</option>
                                        <option>puts</option>
                                    </select>
                                </div>
                                <div>
                                    <label for="baseAsset" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white flex flex-row justify-between">
                                        <span>
                                            <b>@BaseAssetAction @BaseAssetName</b>
                                        </span>
                                        <span>
                                            @if(UserBaseAssetBalance is not null) {
                                                <a class="font-medium text-blue-600 hover:underline dark:text-blue-500" href="@SelectedTokenPair!.GetEtherScanTokenBalanceUrl(@SelectedTokenPair.BaseAssetAddress, @_metamaskHostProvider.SelectedAccount)" target="_blank">Balance: @UserBaseAssetBalance</a>
                                            }
                                        </span>
                                        
                                    </label>
                                    <input type="number" name="baseAssetAmount" id="baseAssetAmount"
                                        class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                        placeholder="you pay" required="" @bind-value:get="InputedBaseAssetAmount" @bind-value:set="SetInputedBaseAssetAmount"
                                        min="0.001" max="10000000" step="0.001"
                                    >
                                    @if(SelectedOptionsKind == "calls" && UserBaseAssetBalance == new Decimal(0))
                                    {
                                        <p id="helper-text-explanation" class="mt-2 text-sm text-gray-500 dark:text-gray-400">Balance not enough? Get some from uniswap or binance</p>
                                    }
                                </div>
                                <div>
                                    <label for="quoteAsset"
                                        class="block mb-2 text-sm font-medium text-gray-900 dark:text-white flex flex-row justify-between">
                                        <span>
                                            <b>@QuoteAssetAction @QuoteAssetName</b>
                                        </span>
                                        <span>
                                            @if(UserQuoteAssetBalance is not null) {
                                                <a class="font-medium text-blue-600 hover:underline dark:text-blue-500" href="@SelectedTokenPair!.GetEtherScanTokenBalanceUrl(@SelectedTokenPair.QuoteAssetAddress, @_metamaskHostProvider.SelectedAccount)" target="_blank">Balance: @UserQuoteAssetBalance</a>
                                            }
                                        </span>
                                        
                                    </label>
                                    <input type="number" name="quoteAsset" id="quoteAsset" placeholder="you will get"
                                        class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                        required="" @bind-value:get="InputedQuoteAssetAmount" @bind-value:set="SetInputedQuoteAssetAmount"
                                        min="1" max="10000000" step="1"
                                    >
                                    @if(SelectedOptionsKind == "puts" && UserQuoteAssetBalance == 0)
                                    {
                                        <p id="helper-text-explanation" class="mt-2 text-sm text-red-600 dark:text-red-500">Balance not enough? Get some from uniswap or binance</p>
                                    }
                                </div>

                                <div>
                                    <label for="maturityDate" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Select Maturity Date</label>
                                    <input id="maturityDate" type="date" 
                                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
                                        placeholder="Select date"
                                        @bind-value="MaturityDate"
                                        @bind-value:format="yyyy-MM-dd"
                                    >
                                </div>                                
                            </form>
                            <ol class="space-y-4 md:space-y-6">
                                <li>
                                    <MintProgressButton Text="1. Check Allowance" Finished=@Steps[0].Finished Disabled=@Steps[0].Disabled ClickCallback="CheckAllowance" />
                                </li>
                                <li>
                                    <MintProgressButton Text="2. Approve" Finished=@Steps[1].Finished Disabled=@Steps[1].Disabled ClickCallback="Approve" />
                                </li>
                                <li>
                                    <MintProgressButton Text="3. Mint" Finished=@Steps[2].Finished Disabled=@Steps[2].Disabled ClickCallback="Mint" />
                                </li>
                            </ol>
                        </div>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <MyMetamask />
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
    </div>
</section>


@code {
    public TokenPairs AllTokenPairs = new TokenPairs();

    public string SelectedOptionsKind {get; set;} = "calls";

    private async Task ChangeOptionsKind(string value)
    {
        SelectedOptionsKind = value;
        ResetSteps();
        await Task.CompletedTask;
    }

    public string SelectedTokenPairName {get; set;} = "";

    public string BaseAssetAction => SelectedOptionsKind == "calls" ? "You pay" : "You will get";

    public string BaseAssetName => SelectedTokenPair is not null ? SelectedTokenPair.BaseAssetName : "";

    public string QuoteAssetAction => SelectedOptionsKind == "calls" ? "You will get" : "You pay";

    public string QuoteAssetName => SelectedTokenPair is not null ? SelectedTokenPair.QuoteAssetName : "";

    private async Task ChangeSelectedTokenPairName(string value)
    {
        SelectedTokenPair = AllTokenPairs.FindByName(value);
        if (SelectedTokenPair is not null)
        {
            SelectedTokenPairName = SelectedTokenPair.BaseAssetName + "/" + SelectedTokenPair.QuoteAssetName;
            Logger.LogInformation($"SelectedTokenPairName: {SelectedTokenPairName}");

            var baseBalanceInWei = await GetUserBalance(_metamaskHostProvider.SelectedAccount, SelectedTokenPair.BaseAssetAddress);
            UserBaseAssetBalance = Web3.Convert.FromWei(baseBalanceInWei, SelectedTokenPair.BaseAssetDecimals);
            var quoteBalanceInWei = await GetUserBalance(_metamaskHostProvider.SelectedAccount, SelectedTokenPair.QuoteAssetAddress);
            UserQuoteAssetBalance = Web3.Convert.FromWei(quoteBalanceInWei, SelectedTokenPair.QuoteAssetDecimals);

            ResetSteps();
        }
    }

    public decimal? UserBaseAssetBalance {get; set;}

    public decimal? UserQuoteAssetBalance {get; set;}

    public TokenPair? SelectedTokenPair {get; set;}

    public DateOnly MaturityDate {get; set;} = DateOnly.FromDateTime(DateTime.Now).AddDays(3);


    public decimal InputedBaseAssetAmount {get; set;} = 0m;

    private void SetInputedBaseAssetAmount(decimal value)
    {
        if (SelectedOptionsKind == "calls")
        {
            if (UserBaseAssetBalance is not null)
            {
                if (value >= UserBaseAssetBalance)
                {
                    InputedBaseAssetAmount = UserBaseAssetBalance.Value;
                } else if (value <= 0)
                {
                    InputedBaseAssetAmount = 0;
                } else {
                    InputedBaseAssetAmount = value;
                }
            } else {
                InputedBaseAssetAmount = 0;
            }
        } else {
            if (value <= 0)
            {
                InputedBaseAssetAmount = 0;
            }
            else
            {
                InputedBaseAssetAmount = value;
            }
        }
        ResetSteps();
    }

    public decimal InputedQuoteAssetAmount {get; set;} = 0m;

    private void SetInputedQuoteAssetAmount(decimal value)
    {
        if (SelectedOptionsKind == "puts")
        {
            if (UserQuoteAssetBalance is not null)
            {
                if (value >= UserQuoteAssetBalance)
                {
                    InputedQuoteAssetAmount = UserQuoteAssetBalance.Value;
                } else if (value <= 0)
                {
                    InputedQuoteAssetAmount = 0;
                }
                else
                {
                    InputedQuoteAssetAmount = value;
                }
            } else {
                InputedQuoteAssetAmount = 0;
            }
        }
        else
        {
            InputedQuoteAssetAmount = value;
        }
        ResetSteps();
    }

    public class Step
    {
        public bool Finished {get; set;} = false;

        public bool Disabled {get; set;} = true;
    }

    public Step[] Steps = [
        new Step { Finished = false, Disabled = false},
        new Step { Finished = false, Disabled = true},
        new Step { Finished = false, Disabled = true},
    ];

    // 每次表单变化时都要重置步骤状态
    private void ResetSteps()
    {
        Steps = [
            new Step { Finished = false, Disabled = false},
            new Step { Finished = false, Disabled = true},
            new Step { Finished = false, Disabled = true},
        ];
    }


    private async Task CheckAllowance(MouseEventArgs e)
    {
        var curAddr = _metamaskHostProvider.SelectedAccount;
        Logger.LogInformation($"start check allowance, cur address is {curAddr}, date: {MaturityDate}");
        Steps[0].Disabled = true; // 一点击就该置灰
        if (SelectedTokenPair is not null && SelectedOptionsKind != "" && InputedBaseAssetAmount > 0 && InputedQuoteAssetAmount > 0 && MaturityDate > DateOnly.FromDateTime(DateTime.Now))
        {
            Logger.LogInformation($"can click check allowance, maturityDate: {MaturityDate}");
            if (SelectedOptionsKind == "calls")
            {
                if (InputedBaseAssetAmount <= UserBaseAssetBalance)
                {
                    Logger.LogInformation($"user base balance is ok, {_metamaskHostProvider.SelectedAccount}, {SelectedTokenPair.NftAddress}, {SelectedTokenPair.BaseAssetAddress}");
                    var baseAssetAllowanceWei = await GetAllowance(_metamaskHostProvider.SelectedAccount, SelectedTokenPair.NftAddress, SelectedTokenPair.BaseAssetAddress);
                    var baseAssetAllowance = Web3.Convert.FromWei(baseAssetAllowanceWei, SelectedTokenPair.BaseAssetDecimals);
                    Logger.LogInformation($"weth allowance={baseAssetAllowance}");
                    if (baseAssetAllowance >= InputedBaseAssetAmount)
                    {
                        Logger.LogInformation($"base allowance is enough, skip approve step, matutiryDate: 11");
                        Steps[0].Finished = true;
                        Steps[0].Disabled = true;

                        Steps[1].Finished = true;
                        Steps[1].Disabled = true;

                        Steps[2].Finished = false;
                        Steps[2].Disabled = false;
                    }
                    else
                    {
                        Steps[0].Finished = true;
                        Steps[0].Disabled = true;

                        Steps[1].Finished = false;
                        Steps[1].Disabled = false;
                    }
                }
                else
                {
                    Logger.LogInformation("base balance not enough");
                }
            }
            else if (SelectedOptionsKind == "puts")
            {
                if (InputedQuoteAssetAmount <= UserQuoteAssetBalance)
                {
                    Logger.LogInformation("user quote balance is ok");
                    // Check USDC allowance
                    var quoteAssetAllowanceWei = await GetAllowance(_metamaskHostProvider.SelectedAccount, SelectedTokenPair.NftAddress, SelectedTokenPair.QuoteAssetAddress);
                    var quoteAssetAllowance = Web3.Convert.FromWei(quoteAssetAllowanceWei, SelectedTokenPair.QuoteAssetDecimals);
                    if (quoteAssetAllowance >= InputedQuoteAssetAmount)
                    {
                        Logger.LogInformation($"quote allowance is enough, skip approve");
                        Steps[0].Finished = true;
                        Steps[0].Disabled = true;

                        Steps[1].Finished = true;
                        Steps[1].Disabled = true;

                        Steps[2].Finished = false;
                        Steps[2].Disabled = false;
                    }
                    else
                    {
                        Steps[0].Finished = true;
                        Steps[0].Disabled = true;

                        Steps[1].Finished = false;
                        Steps[1].Disabled = false;
                    }
                }
                else
                {
                    Logger.LogInformation("quote balance not enough");
                }
            }
        }
        else
        {
            Logger.LogInformation($"can not click check allowance, maturityDate: {MaturityDate.Month}");
        }
    }

    private async Task Approve()
    {
        Logger.LogInformation("approve clicked");
        Steps[1].Disabled = true; // 确保只点一次
        var web3 = await _metamaskHostProvider.GetWeb3Async();
        var contractAddress = SelectedOptionsKind == "calls" ? SelectedTokenPair!.BaseAssetAddress : SelectedTokenPair!.QuoteAssetAddress;
        var wad = SelectedOptionsKind == "calls" ? Web3.Convert.ToWei(InputedBaseAssetAmount, SelectedTokenPair.BaseAssetDecimals) : Web3.Convert.ToWei(InputedQuoteAssetAmount, SelectedTokenPair.QuoteAssetDecimals);
        string erc20ApproveAbi = """[{"inputs":[{"internalType":"address","name":"guy","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]""";
        var contract = web3.Eth.GetContract(erc20ApproveAbi, contractAddress);
        var callsFunction = contract.GetFunction("approve");
        var gas = await callsFunction.EstimateGasAsync(
            SelectedTokenPair!.NftAddress,
            wad
        );
        try {
            var receipt = await callsFunction.SendTransactionAndWaitForReceiptAsync(
                _metamaskHostProvider.SelectedAccount,
                gas,
                new Nethereum.Hex.HexTypes.HexBigInteger(0),
                CancellationToken.None,
                SelectedTokenPair!.NftAddress,
                wad
            );
            Logger.LogInformation($"approve finished, tx: {receipt.TransactionHash.ToString()}");
            // 标记完成，且让第三步可点击
            Steps[1].Finished = true;
            Steps[1].Disabled = true;

            Steps[2].Finished = false;
            Steps[2].Disabled = false;
        } catch (Nethereum.JsonRpc.Client.RpcResponseException e) {
            if (e.Message.Contains("User denied transaction signature"))
            {
                // TODO: 显示取消的toast
                Logger.LogInformation("user cancel approve tx");
            }
            Steps[1].Disabled = false;

            Steps[2].Finished = false; // approve 失败的话，mint按钮不可点
            Steps[2].Disabled = true;
        }
    }

    private async Task Mint()
    {
        Logger.LogInformation($"mint clicked, maturity: {MaturityDate}");
        Steps[2].Disabled = true;
        var web3 = await _metamaskHostProvider.GetWeb3Async();
        var contract = web3.Eth.GetContract(OptionsNFT.abi, SelectedTokenPair!.NftAddress);
        var funcName = SelectedOptionsKind == "calls" ? "calls" : "puts";
        var callsFunction = contract.GetFunction(funcName);
        var gas = await callsFunction.EstimateGasAsync(
            Web3.Convert.ToWei(InputedBaseAssetAmount, SelectedTokenPair.BaseAssetDecimals), 
            Web3.Convert.ToWei(InputedQuoteAssetAmount, SelectedTokenPair.QuoteAssetDecimals), 
            new DateTimeOffset(MaturityDate.ToDateTime(TimeOnly.MinValue)).ToUnixTimeSeconds()
        );
        Logger.LogInformation($"tx details1, {Web3.Convert.ToWei(InputedBaseAssetAmount, SelectedTokenPair.BaseAssetDecimals)}, {Web3.Convert.ToWei(InputedQuoteAssetAmount, SelectedTokenPair.QuoteAssetDecimals)}, {new DateTimeOffset(MaturityDate.ToDateTime(TimeOnly.MinValue)).ToUnixTimeSeconds()}, {gas}");
        try {
            var receipt = await callsFunction.SendTransactionAndWaitForReceiptAsync(
                _metamaskHostProvider.SelectedAccount,
                gas,
                new Nethereum.Hex.HexTypes.HexBigInteger(0),
                CancellationToken.None,
                Web3.Convert.ToWei(InputedBaseAssetAmount, SelectedTokenPair.BaseAssetDecimals), 
                Web3.Convert.ToWei(InputedQuoteAssetAmount, SelectedTokenPair.QuoteAssetDecimals), 
                new DateTimeOffset(MaturityDate.ToDateTime(TimeOnly.MinValue)).ToUnixTimeSeconds()
            );
            Logger.LogInformation($"mint finished, tx: {receipt.TransactionHash.ToString()}");
            Steps[2].Finished = true;
            Steps[2].Disabled = true;
        } catch (Nethereum.JsonRpc.Client.RpcResponseException e) {
            if (e.Message.Contains("User denied transaction signature"))
            {
                // TODO: 显示取消的toast
                Logger.LogInformation("user canceled mint tx");
            }
            Steps[2].Finished = false;
            Steps[2].Disabled = false;
        }
    }

    [Nethereum.ABI.FunctionEncoding.Attributes.Function("balanceOf", "uint256")]
    public class BalanceOfFunction : FunctionMessage
    {
        [Nethereum.ABI.FunctionEncoding.Attributes.ParameterAttribute("address", "_owner", 1)]
        public string Owner { get; set; } = "";
    }

    private async Task<BigInteger> GetUserBalance(string userAddress, string contractAddress)
    {
        var balanceOfFunctionMessage = new BalanceOfFunction()
        {
            Owner = userAddress,
        };

        var web3 = await _metamaskHostProvider.GetWeb3Async();
        var balanceHandler = web3.Eth.GetContractQueryHandler<BalanceOfFunction>();
        var balance = await balanceHandler.QueryAsync<BigInteger>(contractAddress, balanceOfFunctionMessage);
        return balance;
    }

    [Nethereum.ABI.FunctionEncoding.Attributes.Function("allowance", "uint256")]
    public class AllowanceFunction : FunctionMessage
    {
        [Nethereum.ABI.FunctionEncoding.Attributes.ParameterAttribute("address", "addr1", 1)]
        public string Addr1 { get; set; } = "";

        [Nethereum.ABI.FunctionEncoding.Attributes.ParameterAttribute("address", "addr2", 2)]
        public string Addr2 { get; set; } = "";

    }

    private async Task<BigInteger> GetAllowance(string payAddr, string recvAddr, string contractAddress)
    {
        var allowanceFunctionMessage = new AllowanceFunction()
        {
            Addr1 = payAddr,
            Addr2 = recvAddr,
        };

        var web3 = await _metamaskHostProvider.GetWeb3Async();
        var handler = web3.Eth.GetContractQueryHandler<AllowanceFunction>();
        var balance = await handler.QueryAsync<BigInteger>(contractAddress, allowanceFunctionMessage);
        return balance;
    }

}
