@page "/app/options"

@layout AppLayout
@inject ILogger<AppOptions> Logger
@inject MetamaskHostProvider _metamaskHostProvider
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IJSRuntime JS
@inject ToastService toastService
@inject Web3Service _web3Service
@inject IStringLocalizer<SharedResource> Loc
@inject PriceService _priceService

<PageTitle>@Loc["Options"]</PageTitle>

<section class="bg-gray-50 dark:bg-gray-900">
    <div class="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
        <CascadingAuthenticationState>
            <AuthorizeView Roles="EthereumConnected">
                <Authorized>
                    <div class="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
                        <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
                            <h1 class="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                                @Loc["Options"]
                            </h1>

                            <p class="mb-5 text-xs font-thin text-gray-900 dark:text-gray-300">@Loc["Options_Intro"]</p>

                            <form class="space-y-4 md:space-y-6">
                                <div>
                                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">@Loc["Select Options Kind"]</label>
                                    <select class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                        @bind:get="SelectedOptionsKind"
                                        @bind:event="onchange"
                                        @bind:set="ChangeOptionsKind"
                                    >
                                        <option value="@OptionsKind.CALL">@Loc["Call"]</option>
                                        <option value="@OptionsKind.PUT">@Loc["Put"]</option>
                                    </select>
                                </div>

                                <div>
                                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">@Loc["Select Token Pair"]</label>
                                    <select class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                        @bind:get="SelectedContractName"
                                        @bind:event="onchange"
                                        @bind:set="ChangeSelectedContractName"
                                        >
                                        <option></option>
                                        @foreach(var tokenPair in OptionsContracts.FilterByChainId(_metamaskHostProvider.SelectedNetworkChainId))
                                        {
                                            <option value="@tokenPair.Name">@tokenPair.Name</option>
                                        }
                                    </select>
                                </div>

                                <div>
                                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">@Loc["Select Maturity Date"]</label>
                                    <input type="date" 
                                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
                                        placeholder="Select date"
                                        @bind-value:get="MaturityDate"
                                        @bind-value:set="ChangeMaturityDate"
                                        @bind-value:format="yyyy-MM-dd"
                                    >
                                </div>

                                <div>
                                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white flex flex-row justify-between">
                                        <span>
                                            <b>@BaseAssetAction @BaseAssetName</b>
                                        </span>
                                        <span>
                                            @if(UserBaseAssetBalance is not null) {
                                                <a class="font-medium text-blue-600 hover:underline dark:text-blue-500" href="@SelectedContract!.GetEtherScanTokenBalanceUrl(SelectedContract.BaseAssetAddress, @_metamaskHostProvider.SelectedAccount)" target="_blank">@Loc["Balance"]: @UserBaseAssetBalance</a>
                                            }
                                        </span>
                                    </label>
                                    <input type="number"
                                        class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                        required @bind-value:get="InputedBaseAssetAmount" @bind-value:set="SetInputedBaseAssetAmount"
                                        min="0.001" max="10000000" step="0.001"
                                    >
                                    @if(SelectedOptionsKind == OptionsKind.CALL && UserBaseAssetBalance == new Decimal(0))
                                    {
                                        <p id="helper-text-explanation" class="mt-2 text-sm text-gray-500 dark:text-gray-400">@Loc["BalanceIsEmpty_Stmt"]</p>
                                    }
                                    else if (SelectedOptionsKind == OptionsKind.PUT && SelectedContract is not null && SelectedContract.OkxTickSymbol is not null)
                                    {
                                        <p id="helper-text-explanation" class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                                            <a @onclick="RecommendPrice" class="font-medium text-blue-600 hover:underline dark:text-blue-500">@Loc["RecommendPrice_Stmt"]</a>
                                        </p>
                                    }
                                </div>
                                <div>
                                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white flex flex-row justify-between">
                                        <span>
                                            <b>@QuoteAssetAction @QuoteAssetName</b>
                                        </span>
                                        <span>
                                            @if(UserQuoteAssetBalance is not null) {
                                                <a class="font-medium text-blue-600 hover:underline dark:text-blue-500" href="@SelectedContract!.GetEtherScanTokenBalanceUrl(SelectedContract.QuoteAssetAddress, @_metamaskHostProvider.SelectedAccount)" target="_blank">@Loc["Balance"]: @UserQuoteAssetBalance</a>
                                            }
                                        </span>
                                        
                                    </label>
                                    <input type="number"
                                        class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                        required @bind-value:get="InputedQuoteAssetAmount" @bind-value:set="SetInputedQuoteAssetAmount"
                                        min="1" max="10000000" step="1"
                                    >
                                    @if(SelectedOptionsKind == OptionsKind.PUT && UserQuoteAssetBalance == 0)
                                    {
                                        <p id="helper-text-explanation" class="mt-2 text-sm text-red-600 dark:text-red-500">@Loc["BalanceIsEmpty_Stmt"]</p>
                                    }
                                    else if (SelectedOptionsKind == OptionsKind.CALL && SelectedContract is not null && SelectedContract.OkxTickSymbol is not null)
                                    {
                                        <p id="helper-text-explanation" class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                                            <a @onclick="RecommendPrice" class="font-medium text-blue-600 hover:underline dark:text-blue-500">@Loc["RecommendPrice_Stmt"]</a>
                                        </p>
                                    }
                                </div>

                            </form>
                            <ol class="space-y-4 md:space-y-6">
                                <li>
                                    <MintProgressButton Text=@($"1. {Loc["Check Allowance"]}") CurrentProgress="@Steps[0]" ClickCallback="CheckAllowance" />
                                </li>
                                <li>
                                    <MintProgressButton Text=@($"2. {Loc["Approve"]}") CurrentProgress="@Steps[1]" ClickCallback="Approve" />
                                </li>
                                <li>
                                    <MintProgressButton Text=@($"3. {Loc["Mint"]}") CurrentProgress="@Steps[2]" ClickCallback="Mint" />
                                </li>
                            </ol>
                        </div>
                    </div>
                    <SingleToast />
                </Authorized>
                <NotAuthorized>
                    <LoginButton />
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
    </div>
</section>


@code {
    protected override void OnInitialized()
    {
        _metamaskHostProvider.NetworkChanged += MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task MetamaskHostProvider_NetworkChainIdChanged(long chainId)
    {
        await InvokeAsync(() => this.StateHasChanged());
    }

    public void Dispose()
    {
        _metamaskHostProvider.NetworkChanged -= MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
    }

    public OptionsKind SelectedOptionsKind {get; set;}

    private void ChangeOptionsKind(OptionsKind value)
    {
        SelectedOptionsKind = value;
        ResetSteps();
    }

    public string SelectedContractName {get; set;} = "";

    public string BaseAssetAction => SelectedOptionsKind == OptionsKind.CALL ? Loc["You Pay"] : Loc["You Will Get"];

    public string BaseAssetName => SelectedContract is not null ? SelectedContract.BaseAssetName : "";

    public string QuoteAssetAction => SelectedOptionsKind == OptionsKind.CALL ? Loc["You Will Get"] : Loc["You Pay"];

    public string QuoteAssetName => SelectedContract is not null ? SelectedContract.QuoteAssetName : "";

    private async Task ChangeSelectedContractName(string value)
    {
        Logger.LogInformation($"selected token pair changed: {value}");
        SelectedContract = OptionsContracts.FilterByChainId(_metamaskHostProvider.SelectedNetworkChainId)
            .Where(item => item.Name == value)
            .FirstOrDefault();
        if (SelectedContract is not null)
        {
            SelectedContractName = value;

            var baseBalanceInWei = await _web3Service.GetUserBalance(_metamaskHostProvider.SelectedAccount, SelectedContract.BaseAssetAddress);
            UserBaseAssetBalance = Web3.Convert.FromWei(baseBalanceInWei, SelectedContract.BaseAssetDecimals);
            var quoteBalanceInWei = await _web3Service.GetUserBalance(_metamaskHostProvider.SelectedAccount, SelectedContract.QuoteAssetAddress);
            UserQuoteAssetBalance = Web3.Convert.FromWei(quoteBalanceInWei, SelectedContract.QuoteAssetDecimals);

            ResetSteps();
        }
    }

    public decimal? UserBaseAssetBalance {get; set;}

    public decimal? UserQuoteAssetBalance {get; set;}

    public OptionsContract? SelectedContract {get; set;}

    public DateOnly MaturityDate {get; set;} = DateOnly.FromDateTime(DateTime.Now).AddDays(3);

    public bool IsMaturityDateValid => MaturityDate >= DateOnly.FromDateTime(DateTime.Now.AddDays(2));

    private void ChangeMaturityDate(DateOnly value)
    {
        MaturityDate = value;
        ResetSteps();
    }

    public bool IsFormValid => SelectedContract is not null && InputedBaseAssetAmount > 0 && InputedQuoteAssetAmount > 0 && IsMaturityDateValid;

    public decimal InputedBaseAssetAmount {get; set;} = 0m;

    private void SetInputedBaseAssetAmount(decimal value)
    {
        if (SelectedOptionsKind == OptionsKind.CALL)
        {
            if (UserBaseAssetBalance is not null)
            {
                if (value >= UserBaseAssetBalance)
                {
                    InputedBaseAssetAmount = UserBaseAssetBalance.Value;
                } else if (value <= 0)
                {
                    InputedBaseAssetAmount = 0;
                } else {
                    InputedBaseAssetAmount = value;
                }
            } else {
                InputedBaseAssetAmount = 0;
            }
        } else {
            if (value <= 0)
            {
                InputedBaseAssetAmount = 0;
            }
            else
            {
                InputedBaseAssetAmount = value;
            }
        }
        ResetSteps();
    }

    public decimal InputedQuoteAssetAmount {get; set;} = 0m;

    private void SetInputedQuoteAssetAmount(decimal value)
    {
        if (SelectedOptionsKind == OptionsKind.PUT)
        {
            if (UserQuoteAssetBalance is not null)
            {
                if (value >= UserQuoteAssetBalance)
                {
                    InputedQuoteAssetAmount = UserQuoteAssetBalance.Value;
                } else if (value <= 0)
                {
                    InputedQuoteAssetAmount = 0;
                }
                else
                {
                    InputedQuoteAssetAmount = value;
                }
            } else {
                InputedQuoteAssetAmount = 0;
            }
        }
        else
        {
            InputedQuoteAssetAmount = value;
        }
        ResetSteps();
    }

    private async Task RecommendPrice()
    {
        var price = await _priceService.GetRecommendOptionsPrice(SelectedOptionsKind, MaturityDate, SelectedContract!.OkxTickSymbol!, SelectedContract!.OkxOptUly);
        Logger.LogInformation($"recommend price clicked, price={price}");
        if (SelectedOptionsKind == OptionsKind.CALL)
        {
            SetInputedQuoteAssetAmount(InputedBaseAssetAmount * price);
        }
        else
        {
            SetInputedBaseAssetAmount(InputedQuoteAssetAmount * price);
        }

        await Task.CompletedTask;
    }

    public MintProgressButton.Progress[] Steps = [
        MintProgressButton.Progress.NotStarted,
        MintProgressButton.Progress.NotStarted,
        MintProgressButton.Progress.NotStarted,
    ];

    // 每次表单变化时都要重置步骤状态
    private void ResetSteps()
    {
        Steps = [
            MintProgressButton.Progress.NotStarted,
            MintProgressButton.Progress.NotStarted,
            MintProgressButton.Progress.NotStarted,
        ];
        if (IsFormValid)
        {
            Steps[0] = MintProgressButton.Progress.ToStart;
        }
    }

    private bool isSupportedNetwork()
    {
        Logger.LogInformation("start check supported chain");
        var currentNetwork = SupportedNetworks.GetNetwork(_metamaskHostProvider.SelectedNetworkChainId);
        if (currentNetwork is not null)
        {
            return true;
        }
        return false;
    }


    private async Task CheckAllowance(MouseEventArgs e)
    {
        if (!isSupportedNetwork())
        {
            toastService.ShowToast(@Loc["InvalidNetwork_Stmt"], ToastLevel.Error);
            return;
        }
        if (!IsMaturityDateValid)
        {
            var minDate = DateOnly.FromDateTime(DateTime.Now.AddDays(2));
            toastService.ShowToast($"{Loc["MaturityTooEarly_Stmt"]} {minDate}", ToastLevel.Error);
            return;
        }
        var curAddr = _metamaskHostProvider.SelectedAccount;
        Logger.LogInformation($"start check allowance, cur address is {curAddr}, date: {MaturityDate}");
        Steps[0] = MintProgressButton.Progress.InProgress; // 一点击就该置灰
        if (SelectedContract is not null && InputedBaseAssetAmount > 0 && InputedQuoteAssetAmount > 0)
        {
            Logger.LogInformation($"can click check allowance, maturityDate: {MaturityDate}");
            if (SelectedOptionsKind == OptionsKind.CALL)
            {
                if (InputedBaseAssetAmount <= UserBaseAssetBalance)
                {
                    Logger.LogInformation($"user base balance is ok, {_metamaskHostProvider.SelectedAccount}, {SelectedContract.NftAddress}, {SelectedContract.BaseAssetAddress}");
                    var baseAssetAllowanceWei = await _web3Service.GetAllowance(_metamaskHostProvider.SelectedAccount, SelectedContract.NftAddress, SelectedContract.BaseAssetAddress);
                    var baseAssetAllowance = Web3.Convert.FromWei(baseAssetAllowanceWei, SelectedContract.BaseAssetDecimals);
                    Logger.LogInformation($"weth allowance={baseAssetAllowance}");
                    if (baseAssetAllowance >= InputedBaseAssetAmount)
                    {
                        Logger.LogInformation($"base allowance is enough, skip approve step");
                        Steps[0] = MintProgressButton.Progress.Finished;
                        Steps[1] = MintProgressButton.Progress.Finished;
                        Steps[2] = MintProgressButton.Progress.ToStart;
                    }
                    else
                    {
                        Steps[0] = MintProgressButton.Progress.Finished;
                        Steps[1] = MintProgressButton.Progress.ToStart;
                    }
                }
                else
                {
                    toastService.ShowToast($"{SelectedContract.BaseAssetName} {Loc["InsufficientBalance_Stmt"]}", ToastLevel.Error);
                    Steps[0] = MintProgressButton.Progress.ToStart;

                    return;
                }
            }
            else if (SelectedOptionsKind == OptionsKind.PUT)
            {
                if (InputedQuoteAssetAmount <= UserQuoteAssetBalance)
                {
                    Logger.LogInformation("user quote balance is ok");
                    // Check USDC allowance
                    var quoteAssetAllowanceWei = await _web3Service.GetAllowance(_metamaskHostProvider.SelectedAccount, SelectedContract.NftAddress, SelectedContract.QuoteAssetAddress);
                    var quoteAssetAllowance = Web3.Convert.FromWei(quoteAssetAllowanceWei, SelectedContract.QuoteAssetDecimals);
                    if (quoteAssetAllowance >= InputedQuoteAssetAmount)
                    {
                        Logger.LogInformation($"quote allowance is enough, skip approve");
                        Steps[0] = MintProgressButton.Progress.Finished;
                        Steps[1] = MintProgressButton.Progress.Finished;
                        Steps[2] = MintProgressButton.Progress.ToStart;
                    }
                    else
                    {
                        Steps[0] = MintProgressButton.Progress.Finished;
                        Steps[1] = MintProgressButton.Progress.ToStart;
                    }
                }
                else
                {
                    toastService.ShowToast($"{SelectedContract.QuoteAssetName} {Loc["InsufficientBalance_Stmt"]}", ToastLevel.Error);
                    Steps[0] = MintProgressButton.Progress.ToStart;
                    return;
                }
            }
        }
        else
        {
            Logger.LogInformation($"can not click check allowance, maturityDate: {MaturityDate}");
            Steps[0] = MintProgressButton.Progress.ToStart; // 让用户重来
            toastService.ShowToast(Loc["InvalidForm_Stmt"], ToastLevel.Error);
        }
    }

    private async Task Approve()
    {
        Logger.LogInformation("approve clicked");
        if (!isSupportedNetwork())
        {
            toastService.ShowToast(Loc["InvalidNetwork_Stmt"], ToastLevel.Error);
            return;
        }
        Steps[1] = MintProgressButton.Progress.InProgress; // 一点击就该置灰
        var contractAddress = SelectedOptionsKind == OptionsKind.CALL ? SelectedContract!.BaseAssetAddress : SelectedContract!.QuoteAssetAddress;
        var wad = SelectedOptionsKind == OptionsKind.CALL ? Web3.Convert.ToWei(InputedBaseAssetAmount, SelectedContract.BaseAssetDecimals) : Web3.Convert.ToWei(InputedQuoteAssetAmount, SelectedContract.QuoteAssetDecimals);
        try {
            var txHash = await _web3Service.Approve(SelectedContract!.NftAddress, wad, contractAddress);
            Logger.LogInformation($"approve finished, tx: {txHash}");
            await Task.Delay(1000);
            // check allowance again
            var newAllowance = await _web3Service.GetAllowance(_metamaskHostProvider.SelectedAccount, SelectedContract!.NftAddress, contractAddress);
            if (newAllowance < wad)
            {
                // 没有授权足够的金额
                toastService.ShowToast(Loc["InsufficientAllowance_Stmt"], ToastLevel.Error);
                Steps[1] = MintProgressButton.Progress.ToStart; // 让用户重新开始再来一遍
                return;
            }

            // 标记完成，且让第三步可点击
            Steps[1] = MintProgressButton.Progress.Finished;
            Steps[2] = MintProgressButton.Progress.ToStart;

            toastService.ShowToast(Loc["ApproveSuccess_Stmt"], ToastLevel.Success);
        } catch (Nethereum.JsonRpc.Client.RpcResponseException e) {
            if (e.Message.Contains("User denied transaction signature"))
            {
                toastService.ShowToast(Loc["TxCancelled_Stmt"], ToastLevel.Error);
            }
            Steps[1] = MintProgressButton.Progress.ToStart; // 让用户重来一次
        }
    }

    private async Task Mint()
    {
        Logger.LogInformation($"mint clicked, maturity: {MaturityDate}, optionsKind: {SelectedOptionsKind}");
        if (!isSupportedNetwork())
        {
            toastService.ShowToast(Loc["InvalidNetwork_Stmt"], ToastLevel.Error);
            return;
        }
        Steps[2] = MintProgressButton.Progress.InProgress; // 一点击就该置灰
        try {
            var txHash = await _web3Service.MintOptions(
                SelectedOptionsKind,
                Web3.Convert.ToWei(InputedBaseAssetAmount, SelectedContract!.BaseAssetDecimals), 
                Web3.Convert.ToWei(InputedQuoteAssetAmount, SelectedContract!.QuoteAssetDecimals), 
                new DateTimeOffset(MaturityDate.ToDateTime(TimeOnly.MinValue)).ToUnixTimeSeconds(),
                SelectedContract!.NftAddress
            );

            Logger.LogInformation($"mint finished, tx: {txHash}");
            Steps[2] = MintProgressButton.Progress.Finished;

            toastService.ShowToast(Loc["OptionsMinted_Stmt"], ToastLevel.Success);
        } catch (Nethereum.JsonRpc.Client.RpcResponseException e) {
            if (e.Message.Contains("User denied transaction signature"))
            {
                toastService.ShowToast(Loc["TxCancelled_Stmt"], ToastLevel.Error);
            }
            Steps[2] = MintProgressButton.Progress.ToStart;
        }
    }
}
