@inject HttpClient Http
@inject ILogger<AppUserRoulette> Logger
@inject MetamaskHostProvider _metamaskHostProvider
@inject Web3Service _web3Service
@inject ToastService toastService
@inject INftFetcher _nftFetcher
@inject IStringLocalizer<SharedResource> Loc

@page "/app/user/roulette"
@layout AppLayout

<PageTitle>@Loc["My Roulette NFT"]</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView Roles="EthereumConnected">
        <Authorized>
            <section class="bg-gray-50 dark:bg-gray-900 my-10">
                @if (loadingTokens)
                {
                    <div role="status" class="flex flex-col items-center">
                        <svg aria-hidden="true" class="inline w-10 h-10 text-gray-200 animate-spin dark:text-gray-600 fill-gray-600 dark:fill-gray-300" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                        </svg>
                        <span class="sr-only">Loading...</span>
                    </div>
                }
                else
                {
                    @if (UserTokens.Count > 0)
                    {
                        <div class="mx-auto max-w-screen-xl grid grid-cols-1 md:grid-cols-4 lg:grid-cols-6 gap-4 mx-auto lg:py-0">
                        @foreach (var token in UserTokens)
                        {
                            <div class="mx-auto flex flex-col items-center py-2 max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                                <a href="@buildOpenseaTokenUrl(token.Contract, token.TokenId, token.ChainId)" target="_blank">
                                    <img class="rounded-t-lg" src="@token.ImageData" alt="" />
                                </a>
                                <div class="flex flex-row items-center gap-2 p-5">
                                    <button type="button" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                                        @onclick="() => OpenModal(token)"
                                    >
                                        @Loc["Bet_Stmt"]
                                    </button>
                                    @if (token.Openable(_metamaskHostProvider.SelectedAccount))
                                    {
                                        <button type="button" class="@OpenButtonClass inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                                            @onclick="async () => await HandleOpen(token)"
                                            disabled=@OpenButtonDisabled
                                        >
                                            @Loc["Open_Stmt"]
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                        </div>
                    }
                    else
                    {
                        if (SupportedNetworks.GetNetwork(_metamaskHostProvider.SelectedNetworkChainId) is not null)
                        {
                            <h1 class="px-64 mx-auto text-yellow-800 bg-yellow-50 dark:bg-gray-800 dark:text-yellow-300">No tokens for address: @_metamaskHostProvider.SelectedAccount on chain: @_metamaskHostProvider.SelectedNetworkChainId</h1>
                        }
                    }
                }
                <SingleToast />
                <div id="authentication-modal" tabindex="-1" aria-hidden="true" class="@ShowModalClass overflow-y-auto overflow-x-auto fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
                    <div class="relative p-4 w-full max-w-md max-h-full">
                        <!-- Modal content -->
                        <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
                            <!-- Modal header -->
                            <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
                                <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                                    Bet
                                </h3>
                                <button type="button" class="end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-hide="authentication-modal"
                                    @onclick="CloseModal"
                                >
                                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                                    </svg>
                                    <span class="sr-only">Close</span>
                                </button>
                            </div>
                            <!-- Modal body -->
                            <div class="p-4 md:p-5">
                                <form class="space-y-4">
                                    <div>
                                        <label for="amount" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">@CurAssetSymbol</label>
                                        <input type="number" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" required 
                                            @bind-value:get="InputedBaseAssetAmount" @bind-value:set="SetInputedBaseAssetAmount"
                                            min="0.001" max="10000000" step="0.001"
                                        />
                                    </div>
                                    <button type="button" class="@BetButtonClass w-full text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                                        @onclick="HandleBet"
                                        disabled=@BetButtonDisabled
                                    >Submit
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div> 
            </section>
        </Authorized>
        <NotAuthorized>
            @Loc["Connect Wallet"]
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
@code {
    private bool loadingTokens = false;

    private string buildListUrl(string nftContractAddress, long tokenId, long chainId)
    {
        var network = SupportedNetworks.GetNetwork(chainId);
        return $"{network!.OpenseaHost}/{nftContractAddress}/{tokenId}/sell";
    }

    private string buildOpenseaTokenUrl(string nftContractAddress, long tokenId, long chainId)
    {
        var network = SupportedNetworks.GetNetwork(chainId);
        return $"{network!.OpenseaHost}/{nftContractAddress}/{tokenId}";
    }

    private IList<UserRouletteNFT> UserTokens {get; set;} = [];

    private UserRouletteNFT? CurToken {get; set;}

    private string CurAssetSymbol => CurToken is not null ? RouletteContracts.Inner.Where(p => p.NftAddress.Equals(CurToken!.Contract, StringComparison.CurrentCultureIgnoreCase))
        .Select(p => p.BaseAssetName)
        .First() : "Asset";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _metamaskHostProvider.NetworkChanged += MetamaskHostProvider_NetworkChainIdChanged;
            _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;

            if (_metamaskHostProvider.SelectedNetworkChainId != 0 && _metamaskHostProvider.SelectedAccount != "")
            {
                await fetchTokens();
                await InvokeAsync(() => this.StateHasChanged());
            }
        }
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        if (_metamaskHostProvider.SelectedNetworkChainId != 0)
        {
            await fetchTokens();
            await InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async Task MetamaskHostProvider_NetworkChainIdChanged(long chainId)
    {
        await fetchTokens();
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task fetchTokens()
    {
        Logger.LogInformation($"fetch tokens, chainId={_metamaskHostProvider.SelectedNetworkChainId}");
        loadingTokens = true;
        UserTokens = await _nftFetcher.GetUserRouletteTokens(_metamaskHostProvider.SelectedAccount, _metamaskHostProvider.SelectedNetworkChainId);
        Logger.LogInformation($"fetch tokens done, chainId={_metamaskHostProvider.SelectedNetworkChainId}, tokenCount={UserTokens.Count}");
        loadingTokens = false; // 网络请求结束
    }

    public void Dispose()
    {
        _metamaskHostProvider.NetworkChanged -= MetamaskHostProvider_NetworkChainIdChanged;
        _metamaskHostProvider.SelectedAccountChanged -= MetamaskHostProvider_SelectedAccountChanged;
    }

    private bool IsShowModal = false;

    private string ShowModalClass => IsShowModal ? "" : "hidden";

    private bool BetButtonDisabled = false;

    private string BetButtonClass => BetButtonDisabled ? "cursor-not-allowed" : "";
    
    private void OpenModal(UserRouletteNFT token)
    {
        IsShowModal = true;
        CurToken = token;
    }

    private void CloseModal()
    {
        IsShowModal = false;
    }

    public decimal InputedBaseAssetAmount {get; set;} = 0m;

    private void SetInputedBaseAssetAmount(decimal value)
    {
        InputedBaseAssetAmount = value;
    }

    private async Task HandleBet()
    {
        Logger.LogInformation("handle bet, tokenId={}, contract={}", CurToken!.TokenId, CurToken!.Contract);
        var selecteContract = RouletteContracts.Inner.Where(p => p.NftAddress.Equals(CurToken.Contract, StringComparison.CurrentCultureIgnoreCase))
            .First();
        var wad = Web3.Convert.ToWei(InputedBaseAssetAmount, selecteContract.BaseAssetDecimals);
        string baseAssetContract = selecteContract.BaseAssetAddress;
        BetButtonDisabled = true;
        try {
            var allowance = await _web3Service.GetAllowance(_metamaskHostProvider.SelectedAccount, CurToken!.Contract, baseAssetContract);
            if (allowance < wad)
            {
                await _web3Service.Approve(CurToken!.Contract, wad, baseAssetContract);
            }
            var txHash = await _web3Service.BetRoulette(
                wad, 
                CurToken!.TokenId,
                CurToken!.Contract
            );
            toastService.ShowToast($"Token: {CurToken!.TokenId} {Loc["TxSuccess_Stmt"]}", ToastLevel.Success);
        } catch (Nethereum.JsonRpc.Client.RpcResponseException e) {
            if (e.Message.Contains("User denied transaction signature"))
            {
                toastService.ShowToast(Loc["TxCancelled_Stmt"], ToastLevel.Error);
            }
        }
        CloseModal();
        BetButtonDisabled = false;
        await Task.Delay(1000);
        await _nftFetcher.RefreshMetadata(CurToken!.Contract, CurToken!.ChainId, CurToken!.TokenId);
    }

    private bool OpenButtonDisabled = false;

    private string OpenButtonClass => OpenButtonDisabled ? "cursor-not-allowed" : "";
   
    private async Task HandleOpen(UserRouletteNFT token)
    {
        OpenButtonDisabled = true;
        try {
            var txHash = await _web3Service.OpenRoulette(
                token.TokenId,
                token.Contract
            );
            toastService.ShowToast($"Token: {token.TokenId} {Loc["TxSuccess_Stmt"]}", ToastLevel.Success);
        } catch (Nethereum.JsonRpc.Client.RpcResponseException e) {
            if (e.Message.Contains("User denied transaction signature"))
            {
                toastService.ShowToast(Loc["TxCancelled_Stmt"], ToastLevel.Error);
            }
        }
        OpenButtonDisabled = false;

        await Task.Delay(1000);
        await _nftFetcher.RefreshMetadata(token.Contract, token.ChainId, token.TokenId);
    }
}
